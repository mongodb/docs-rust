.. _rust-db-coll:

=========================
Databases and Collections
=========================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

In this guide, you can learn how to use the {+driver-short+} to access
and manage MongoDB databases and collections.

MongoDB organizes data in a hierarchal structure, in which data exist as
**documents** that are grouped into **collections**. A **database** stores
one or more collections.

To learn more about the document data format,
see :manual:`Documents </core/document/>` in the Server manual.

Access a Database
-----------------

You can access a database by calling the following methods on a ``Client``
instance:

- ``database()``: access a database by its name
- ``database_with_options()``: set options (``DatabaseOptions``) while accessing a database
- ``default_database()``: access the default database specified in the
  ``ClientOptions`` instance or connection string used to create the
  ``Client`` instance

The preceding methods return a ``Database`` instance, which you can use
to perform database-level operations and access collections. If you
perform an insert operation against a collection of a nonexistent
database, the server implicitly creates the database and collection.

.. note:: List Databases
   
   To see a list of your deployment's databases, call the
   ``list_database_names()`` method on your client. To see information
   about each database, call the ``list_databases()`` method.

   The following example shows how to print a list of databases by using
   the ``list_database_names()`` method:

   .. io-code-block::
   
      .. input:: /includes/fundamentals/code-snippets/db-coll.rs
         :start-after: begin-list-db
         :end-before: end-list-db
         :language: rust
         :dedent:
   
      .. output:: 
         :language: console
         :visible: false
   
         ["admin", "local", "test_db", ...]

The following example uses the ``database()`` method to access a
database called ``test_db``:

.. literalinclude:: /includes/fundamentals/code-snippets/db-coll.rs
   :language: rust
   :dedent:
   :start-after: begin-database
   :end-before: end-database

Drop a Database
~~~~~~~~~~~~~~~

To drop, or permanently delete, a database, call the ``drop()`` method
on your ``Database`` instance. The following code shows how to drop a
database:

.. literalinclude:: /includes/fundamentals/code-snippets/db-coll.rs
   :language: rust
   :dedent:
   :start-after: begin-drop-db
   :end-before: end-drop-db

Run a Database Command
~~~~~~~~~~~~~~~~~~~~~~

To learn about how to run a database command, see :ref:`rust-run-command`.

Access a Collection
-------------------

You can access a collection by calling the following methods on a ``Database``
instance:

- ``collection()``: access a collection by its name
- ``collection_with_options()``: set options (``CollectionOptions``) while accessing a collection

The preceding methods return a ``Collection`` instance. If you
perform an insert operation against a nonexistent collection, the server
implicitly creates the collection.

.. note:: List Collections
   
   To see a list of collections in a database, call the
   ``list_collection_names()`` method on your database. To see information
   about each collection, call the ``list_collections()`` method.

   The following example shows how to print a list of collections in a
   database by using the ``list_collection_names()`` method:

   .. io-code-block::
   
      .. input:: /includes/fundamentals/code-snippets/db-coll.rs
         :start-after: begin-list-coll
         :end-before: end-list-coll
         :language: rust
         :dedent:
   
      .. output::
         :language: console
         :visible: false
   
         ["my_coll", "coll_xyz", ...]

This example uses the ``collection_with_options()`` method to
perform the following actions:

- Access a collection called ``coll_xyz``
- Set a write preference on the collection in the ``CollectionOptions`` type

.. important:: Parametrized Collections
   
   You must parameterize your ``Collection`` instance by specifying what
   data type it contains. 

.. literalinclude:: /includes/fundamentals/code-snippets/db-coll.rs
   :language: rust
   :dedent:
   :start-after: begin-coll
   :end-before: end-coll

Create a Collection
~~~~~~~~~~~~~~~~~~~

Drop a Collection
~~~~~~~~~~~~~~~~~

.. warning:: Dropping a Collection Deletes All Data in the Collection

   Dropping a collection from your database also permanently deletes all
   documents within that collection and all indexes on that collection.
   Only drop collections that contain data that is no longer needed.

Document Validation
~~~~~~~~~~~~~~~~~~~

**Document validation** provides the ability to validate documents
against a series of filters during writes to a collection.

For more information, see the server documentation for :manual:`document
validation </core/document-validation>`.

.. _addl-info-db-coll:

Additional Information
----------------------

For more information about the concepts in this guide, see the following documentation:


API Documentation
~~~~~~~~~~~~~~~~~

- `database() <{+api+}/struct.Client.html#method.database>`__
