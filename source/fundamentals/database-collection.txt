.. _rust-db-coll:

=========================
Databases and Collections
=========================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

In this guide, you can learn how to use the {+driver-short+} to access
and manage MongoDB databases and collections.

MongoDB organizes data in a hierarchal structure, in which data exist as
**documents** that are grouped into **collections**. A **database** stores
one or more collections.

To learn more about the document data format,
see :manual:`Documents </core/document/>` in the Server manual.

Access a Database
-----------------

You can access a database by calling the following methods on a ``Client``
instance:

- ``database()``: access a database by its name
- ``database_with_options()``: set options (``DatabaseOptions``) while accessing a database
- ``default_database()``: access the default database specified in the
  ``ClientOptions`` instance or connection string used to create the
  ``Client`` instance

The preceding methods return a ``Database`` instance, which you can use
to perform database-level operations and access collections. If you
perform an insert operation against a collection of a nonexistent
database, the server implicitly creates the database and collection.

.. note:: List Databases
   
   To see a list of your deployment's databases, call the
   ``list_database_names()`` method on your client. To see information
   about each database, call the ``list_databases()`` method.

   The following example shows how to print a list of databases by using
   the ``list_database_names()`` method:

   .. io-code-block::
   
      .. input:: /includes/fundamentals/code-snippets/db-coll.rs
         :start-after: begin-list-db
         :end-before: end-list-db
         :language: rust
         :dedent:
   
      .. output:: 
         :language: console
         :visible: false
   
         ["admin", "local", "test_db", ...]

The following example uses the ``database()`` method to access a
database called ``test_db``:

.. literalinclude:: /includes/fundamentals/code-snippets/db-coll.rs
   :language: rust
   :dedent:
   :start-after: start-database
   :end-before: end-database

Drop a Database
~~~~~~~~~~~~~~~

To drop, or permanently delete, a database, call the ``drop()`` method
on your ``Database`` instance. The following code shows how to drop a
database:

.. literalinclude:: /includes/fundamentals/code-snippets/db-coll.rs
   :language: rust
   :dedent:
   :start-after: start-drop-db
   :end-before: end-drop-db

Run a Database Command
~~~~~~~~~~~~~~~~~~~~~~

To learn about how to run a database command, see :ref:`rust-run-command`.

Access a Collection
-------------------

You can access a collection by calling the following methods on a ``Database``
instance:

- ``collection()``: access a collection by its name
- ``collection_with_options()``: set options (``CollectionOptions``) while accessing a collection

The preceding methods return a ``Collection`` instance. If you
perform an insert operation against a nonexistent collection, the server
implicitly creates the collection.

.. note:: List Collections
   
   To see a list of collections in a database, call the
   ``list_collection_names()`` method on your database. To see information
   about each collection, call the ``list_collections()`` method.

   The following example shows how to print a list of collections in a
   database by using the ``list_collection_names()`` method:

   .. io-code-block::
   
      .. input:: /includes/fundamentals/code-snippets/db-coll.rs
         :start-after: begin-list-coll
         :end-before: end-list-coll
         :language: rust
         :dedent:
   
      .. output::
         :language: console
         :visible: false
   
         ["my_coll", "coll_xyz", ...]

This example uses the ``collection_with_options()`` method to
perform the following actions:

- Access a collection called ``coll_xyz``
- Set a write preference on the collection in the ``CollectionOptions`` type

.. important:: Parametrized Collections
   
   You must parameterize your ``Collection`` instance by specifying what
   data type it contains. 

.. literalinclude:: /includes/fundamentals/code-snippets/db-coll.rs
   :language: rust
   :dedent:
   :start-after: start-coll
   :end-before: end-coll

Drop a Database
~~~~~~~~~~~~~~~

Create a Collection
-------------------

Use the `createCollection()
<{+api+}/apidocs/mongodb-driver-sync/com/mongodb/client/MongoDatabase.html#createCollection(java.lang.String,com.mongodb.client.model.CreateCollectionOptions)>`__
method of a ``MongoDatabase`` instance to create a collection
in a database of your connected MongoDB instance.

The following example creates a collection called "exampleCollection":


.. code-block:: java

   database.createCollection("exampleCollection");

You can specify collection options like maximum size and document
validation rules using the `CreateCollectionOptions
<{+api+}/apidocs/mongodb-driver-core/com/mongodb/client/model/CreateCollectionOptions.html>`__
class. The ``createCollection()`` method accepts an instance of
``CreateCollectionOptions`` as an optional second parameter.

Document Validation
~~~~~~~~~~~~~~~~~~~

**Document validation** provides the ability to validate documents
against a series of filters during writes to a collection. You can
specify these filters using the `ValidationOptions
<{+api+}/apidocs/mongodb-driver-core/com/mongodb/client/model/ValidationOptions.html>`__
class, which accepts a series of `Filters
<{+api+}/apidocs/mongodb-driver-core/com/mongodb/client/model/Filters.html>`__
that specifies the validation rules and expressions:

.. code-block:: java

   ValidationOptions collOptions = new ValidationOptions().validator(
       Filters.or(Filters.exists("commander"), Filters.exists("first officer")));
   database.createCollection("ships",
       new CreateCollectionOptions().validationOptions(collOptions));

For more information, see the server documentation for :manual:`document
validation </core/document-validation>`.

Get a List of Collections
-------------------------

You can query for a list of collections in a database using the
`MongoDatabase.listCollectionNames()
<{+api+}/apidocs/mongodb-driver-sync/com/mongodb/client/MongoDatabase.html#listCollectionNames()>`__ method:

.. code-block:: java

   for (String name : database.listCollectionNames()) {
       System.out.println(name);
   }

Drop a Collection
-----------------

You can remove a collection from the database using the 
`MongoCollection.drop()
<{+api+}/apidocs/mongodb-driver-sync/com/mongodb/client/MongoCollection.html#drop()>`__ method:

.. code-block:: java

   MongoCollection<Document> collection = database.getCollection("bass");
   collection.drop();

.. warning:: Dropping a Collection Deletes All Data in the Collection

   Dropping a collection from your database also permanently deletes all
   documents within that collection and all indexes on that collection.
   Only drop collections that contain data that is no longer needed.

.. _java-read-write-pref:

Specify Read Preferences, Read Concerns, and  Write Concerns
------------------------------------------------------------

**Read preferences**, **read concerns**, and **write concerns** control
how the driver routes read operations and waits for acknowledgment for
read and write operations when connected to a MongoDB replica set.
Read preferences and read concerns apply to all read operations;
write concerns apply to all write operations.

``MongoDatabase`` instances inherit their write concern, read concern,
and write preference settings from the ``MongoClient`` used to create
them. ``MongoCollection`` instances inherit their write concern, read concern,
and write preference settings from the ``MongoDatabase`` used to create
them. However, you can use the following methods to obtain an instance
of a ``MongoDatabase`` or ``MongoCollection`` with a read preference,
read concern, or write concern that differs from the setting they would
normally inherit:

- `MongoDatabase.withReadConcern() <{+api+}/apidocs/mongodb-driver-sync/com/mongodb/client/MongoDatabase.html#withReadConcern(com.mongodb.ReadConcern)>`__

- `MongoDatabase.withReadPreference() <{+api+}/apidocs/mongodb-driver-sync/com/mongodb/client/MongoDatabase.html#withReadPreference(com.mongodb.ReadPreference)>`__

- `MongoDatabase.withWriteConcern() <{+api+}/apidocs/mongodb-driver-sync/com/mongodb/client/MongoDatabase.html#withWriteConcern(com.mongodb.WriteConcern)>`__

- `MongoCollection.withReadConcern() <{+api+}/apidocs/mongodb-driver-sync/com/mongodb/client/MongoCollection.html#withReadConcern(com.mongodb.ReadConcern)>`__

- `MongoCollection.withReadPreference() <{+api+}/apidocs/mongodb-driver-sync/com/mongodb/client/MongoCollection.html#withReadPreference(com.mongodb.ReadPreference)>`__

- `MongoCollection.withWriteConcern() <{+api+}/apidocs/mongodb-driver-sync/com/mongodb/client/MongoCollection.html#withWriteConcern(com.mongodb.WriteConcern)>`__

.. tip::

   The ``withReadConcern()``, ``withReadPreference()``, and
   ``withWriteConcern`` methods create a new instance of a
   ``MongoDatabase`` or ``MongoCollection`` with the desired preference
   or concern. The ``MongoDatabase`` or ``MongoCollection`` upon which
   the method is called retains its original preference and concern
   settings.

For more information, see the server documentation on
:manual:`read preferences </core/read-preference/>`,
:manual:`read concerns </reference/read-concern/>`, and
:manual:`write concerns </reference/write-concern/>`.