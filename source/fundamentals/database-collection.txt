.. _rust-db-coll:

=========================
Databases and Collections
=========================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

In this guide, you can learn how to use the {+driver-short+} to access
and manage MongoDB databases and collections.

MongoDB organizes data in a hierarchal structure. A MongoDB
deployment contains one or more **databases**, and each database
contains one or more **collections**. In each collection, MongoDB stores
data as **documents** that contain field-and-value pairs.

To learn more about the document data format,
see :manual:`Documents </core/document/>` in the Server manual.

Access a Database
-----------------

You can access a database by retrieving a `Database <{+api+}/struct.Database.html>`__ instance from your
client. Call one of the following methods on a `Client
<{+api+}/struct.Client.html>`__ instance to create a ``Database``:

- `database() <{+api+}/struct.Client.html#method.database>`__: retrieve a database by its name
- `database_with_options() <{+api+}/struct.Client.html#method.database_with_options>`__: set
  options (`DatabaseOptions <{+api+}/options/struct.DatabaseOptions.html>`__) while retrieving a
  database by its name
- `default_database() <{+api+}/struct.Client.html#method.default_database>`__: access the
  default database specified for your ``Client`` instance
 
.. TODO when client options page is completed. To learn how to specify
.. the default database for your client, see :ref:`clientoptions`.

You can use a ``Database`` instance
to perform database-level operations and access collections that the
database contains.

If you pass a name of a nonexistent database to the ``database()`` or
``database_with_options()`` methods, the driver will still return a
usable ``Database`` instance. If you try to insert any data into this
database, the server implicitly creates it.

The following example uses the ``database()`` method to access a
database called ``test_db``:

.. literalinclude:: /includes/fundamentals/code-snippets/db-coll.rs
   :language: rust
   :dedent:
   :start-after: begin-database
   :end-before: end-database

List Databases
--------------
   
To see a list of your deployment's databases, call the
`list_database_names()
<{+api+}/struct.Client.html#method.list_database_names>`__ method on
your ``Client`` instance. This
method returns a ``Vec<String>`` type, a vector containing the database
names as strings.

The following example shows how to print a list of databases by using
the ``list_database_names()`` method:

.. io-code-block::

   .. input:: /includes/fundamentals/code-snippets/db-coll.rs
      :start-after: begin-list-db
      :end-before: end-list-db
      :language: rust
      :dedent:
   
   .. output::
      :language: console
      :visible: false
   
      ["admin", "local", "test_db", ...]

To see detailed information about each database, call the `list_databases() <{+api+}/struct.Client.html#method.list_databases>`__
method on your ``Client`` instance. This method returns a
``Vec<DatabaseSpecification>`` type. The ``DatabaseSpecification`` type
contains fields describing each database, such as its size and whether
it contains data.

Drop a Database
---------------

Dropping a database permanently deletes all of the data in that database's
collections. To drop a database, call the `drop()
<{+api+}/struct.Database.html#method.drop>`__ method
on your ``Database`` instance. The following code shows
how to drop a database:

.. literalinclude:: /includes/fundamentals/code-snippets/db-coll.rs
   :language: rust
   :dedent:
   :start-after: begin-drop-db
   :end-before: end-drop-db

.. warning:: Dropping a Database Deletes Data

   Dropping a database permanently deletes all
   documents in the database's collections and all indexes on those collections.
   You should drop only databases that contain data that you no longer
   need to access.

Access a Collection
-------------------

You can access a collection by retrieving a `Collection <{+api+}/struct.Collection.html>`__ instance from your
database. Call one of the following methods on a ``Database`` instance
to create a ``Collection``:

- `collection() <{+api+}/struct.Database.html#method.collection>`__: retrieve a collection by its name
- `collection_with_options() <{+api+}/struct.Database.html#method.collection_with_options>`__: set
  options (`CollectionOptions <{+api+}/options/struct.CollectionOptions.html>`__) while accessing a
  collection by its name

If you pass a name of a nonexistent collection to the ``collection()`` or
``collection_with_options()`` methods, the driver will still return a
usable ``Collection`` instance. If you try to insert any data into this
collection, the server implicitly creates it. To learn how to explicitly
create a collection, see the :ref:`Create a Collection
<rust-create-collection>` section of this guide.

This example uses the ``collection_with_options()`` method to
perform the following actions:

- Access a collection called ``coll_xyz``
- Set a write preference on the collection in the ``CollectionOptions`` type

.. literalinclude:: /includes/fundamentals/code-snippets/db-coll.rs
   :language: rust
   :dedent:
   :start-after: begin-coll
   :end-before: end-coll

To learn more about write concerns, see :manual:`Write Concern </reference/write-concern/>` in
the Server manual.

.. important:: Parameterized Collections
   
   You must parameterize your ``Collection`` instance by specifying what
   data type, such as ``Document``, it contains. The ``Collection``
   methods that accept or return instances of the documents in the
   collection accept or return instances of this generic parameter.

   The following example shows equivalent ways of parameterizing a
   collection with the ``Document`` type:

   .. code-block:: rust
      :copyable: false
      
      let my_coll: Collection<Document> = client.database("test_db").collection("coll_xyz");
      let my_coll = client.database("test_db").collection::<Document>("coll_xyz");

   We recommend that you define and parameterize your collection with a
   custom type that models your data instead of the ``Document`` type. By
   using a type specific to your data, you can improve your
   application's performance by avoiding repeated
   serialization code, such as code that verifies certain keys are
   present and that their values are correctly typed.

.. TODO in the prev admonition, link to serialization guide

List Collections
----------------

To see a list of collections in a database, call the
`list_collection_names() <{+api+}/struct.Database.html#method.list_collection_names>`__ method on your ``Database`` instance. This
method returns a ``Vec<String>`` type, a vector containing the
collection names as strings.

The following example shows how to print a list of collections in a
database by using the ``list_collection_names()`` method:

.. io-code-block::

   .. input:: /includes/fundamentals/code-snippets/db-coll.rs
      :start-after: begin-list-coll
      :end-before: end-list-coll
      :language: rust
      :dedent:
   
   .. output::
      :language: console
      :visible: false
   
      ["my_coll", "coll_xyz", ...]

To see detailed information about each collection, call the `list_collections() <{+api+}/struct.Database.html#method.list_collections>`__
method on your ``Database`` instance. This method returns a
``Vec<CollectionSpecification>`` type. The ``CollectionSpecification`` type
contains fields describing each collection, such as its type and settings.

Drop a Collection
-----------------

Dropping a collection permanently deletes all of the data in that
collection. To drop a collection, call the `drop()
<{+api+}/struct.Collection.html#method.drop>`__ method
on your ``Collection`` instance. The following code shows
how to drop a collection:

.. literalinclude:: /includes/fundamentals/code-snippets/db-coll.rs
   :language: rust
   :dedent:
   :start-after: begin-drop-coll
   :end-before: end-drop-coll

.. warning:: Dropping a Collection Deletes Data

   Dropping a collection from your database permanently deletes all
   documents within that collection and all indexes on that collection.
   You should drop only collections that contain data that you no longer
   need to access.

.. _rust-create-collection:

Create a Collection
-------------------

You can explicitly create a collection by calling the
`create_collection() <{+api+}/struct.Database.html#method.create_collection>`__ method on a ``Database`` instance. This method
takes the collection name and an optional `CreateCollectionOptions <{+api+}/options/struct.CreateCollectionOptions.html>`__
type as parameters.

The following code shows how to create a collection called ``coll_abc``:

.. literalinclude:: /includes/fundamentals/code-snippets/db-coll.rs
   :language: rust
   :dedent:
   :start-after: begin-create-coll
   :end-before: end-create-coll

.. TODO While creating a collection, you can implement document validation to
.. maintain a consistent document schema and control which write operations
.. succeed. To learn how to enable this feature, see the guide on :ref:`rust-doc-validation`.

.. _addl-info-db-coll:

Additional Information
----------------------

For more information about the concepts in this guide, see the following documentation:

- :ref:`Insert Documents <rust-insert-guide>`
- :manual:`Databases and Collections </core/databases-and-collections/>`
- :manual:`Documents </core/document/>`

To learn how to run a database command, see :ref:`rust-run-command`.
