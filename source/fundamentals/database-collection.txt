.. _rust-db-coll:

=========================
Databases and Collections
=========================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

In this guide, you can learn how to use the {+driver-short+} to access
and manage MongoDB databases and collections.

MongoDB organizes data in a hierarchal structure, in which data exist as
**documents** that are grouped into **collections**. A **database** stores
one or more collections.

To learn more about the document data format,
see :manual:`Documents </core/document/>` in the Server manual.

Access a Database
-----------------

You can access a database by calling the following methods on a ``Client``
instance:

- ``database()``: access a database by its name
- ``database_with_options()``: set options (``DatabaseOptions``) while accessing a database
- ``default_database()``: access the default database specified in the
  ``ClientOptions`` instance or connection string used to create the
  ``Client`` instance

The preceding methods return a ``Database`` instance, which you can use
to perform database-level operations and access collections. If you
perform an insert operation against a collection of a nonexistent
database, the server implicitly creates the database and collection.

.. note:: List Databases
   
   To see a list of your deployment's databases, call the
   ``list_database_names()`` method on your client. To see information
   about each database, call the ``list_databases()`` method.

   The following example shows how to print a list of databases by using
   the ``list_database_names()`` method:

   .. io-code-block::
   
      .. input:: /includes/fundamentals/code-snippets/db-coll.rs
         :start-after: begin-list-db
         :end-before: end-list-db
         :language: rust
         :dedent:
   
      .. output:: 
         :language: console
         :visible: false
   
         ["admin", "local", "test_db", ...]

The following example uses the ``database()`` method to access a
database called ``test_db``:

.. literalinclude:: /includes/fundamentals/code-snippets/db-coll.rs
   :language: rust
   :dedent:
   :start-after: begin-database
   :end-before: end-database

Drop a Database
~~~~~~~~~~~~~~~

To drop, or permanently delete, a database, call the ``drop()`` method
on your ``Database`` instance. The following code shows how to drop a
database:

.. literalinclude:: /includes/fundamentals/code-snippets/db-coll.rs
   :language: rust
   :dedent:
   :start-after: begin-drop-db
   :end-before: end-drop-db

Run a Database Command
~~~~~~~~~~~~~~~~~~~~~~

To learn about how to run a database command, see :ref:`rust-run-command`.

Access a Collection
-------------------

You can access a collection by calling the following methods on a ``Database``
instance:

- ``collection()``: access a collection by its name
- ``collection_with_options()``: set options (``CollectionOptions``) while accessing a collection

The preceding methods return a ``Collection`` instance. If you
perform an insert operation against a nonexistent collection, the server
implicitly creates the collection. To learn how to explicitly create a collection,
see the :ref:`Create a Collection <rust-create-collection>` section of this guide.

.. note:: List Collections
   
   To see a list of collections in a database, call the
   ``list_collection_names()`` method on your database. To see information
   about each collection, call the ``list_collections()`` method.

   The following example shows how to print a list of collections in a
   database by using the ``list_collection_names()`` method:

   .. io-code-block::
   
      .. input:: /includes/fundamentals/code-snippets/db-coll.rs
         :start-after: begin-list-coll
         :end-before: end-list-coll
         :language: rust
         :dedent:
   
      .. output::
         :language: console
         :visible: false
   
         ["my_coll", "coll_xyz", ...]

This example uses the ``collection_with_options()`` method to
perform the following actions:

- Access a collection called ``coll_xyz``
- Set a write preference on the collection in the ``CollectionOptions`` type

.. literalinclude:: /includes/fundamentals/code-snippets/db-coll.rs
   :language: rust
   :dedent:
   :start-after: begin-coll
   :end-before: end-coll

To learn more about write concerns, see :manual:`Write Concern </reference/write-concern/>` in
the Server manual.

.. important:: Parametrized Collections
   
   You must parameterize your ``Collection`` instance by specifying what
   data type, such as ``Document``, it contains. The ``Collection``
   methods that accept or return instances of the documents in the
   collection accept or return instances of this generic parameter.

   The following example shows equivalent ways of parametrizing a
   collection with the ``Document`` type:

   .. code-block:: rust
      :copyable: false
      
      let my_coll: Collection<Document> = client.database("<db>").collection("<coll>");
      let my_coll = client.database("<db>").collection::<Document>("<coll>");
   
   You can parameterize your collection with the ``Document`` type, but
   we recommend that you define and use types that model your data. By
   parameterizing your ``Collection`` instance with a custom type, you
   can eliminate repeated serialization code and improve your
   application's performance.

.. TODO in the prev admonition, link to serialization guide

Drop a Collection
~~~~~~~~~~~~~~~~~

To drop, or permanently delete, a collection, call the ``drop()`` method
on your ``Collection`` instance. The following code shows how to drop a
collection:

.. literalinclude:: /includes/fundamentals/code-snippets/db-coll.rs
   :language: rust
   :dedent:
   :start-after: begin-drop-coll
   :end-before: end-drop-coll

.. warning:: Dropping a Collection Deletes Data

   Dropping a collection from your database permanently deletes all
   documents within that collection and all indexes on that collection.
   You should drop only collections that contain data that you no longer
   need to access.

.. _rust-create-collection:

Create a Collection
-------------------

You can explicitly create a collection by calling the
``create_collection()`` method on a ``Database`` instance. The
``create_collection()`` method takes the collection name and an optional
``CreateCollectionOptions`` type as parameters.

To learn about the settings you can specify in a
``CreateCollectionOptions`` instance, see its `API documentation
<{+api+}/options/struct.CreateCollectionOptions.html>`__.

The following code shows how to create a collection called ``coll_abc``:

.. literalinclude:: /includes/fundamentals/code-snippets/db-coll.rs
   :language: rust
   :dedent:
   :start-after: begin-create-coll
   :end-before: end-create-coll

Document Validation
~~~~~~~~~~~~~~~~~~~

**Document validation** lets you restrict the types of documents that
can exist in a collection. If you implement document validation, you
can successfully execute only write operations that adhere to the
validation rules.

You can specify document validation when creating a collection by
setting the following fields in a ``CreateCollectionOptions`` instance:

- ``validator``: specifies a validator to restrict the schema of
  documents. To learn more about specifying a validator, see :manual:`validator
  </reference/command/collMod/?utm_source=compass&utm_medium=product#mongodb-collflag-validator>` in the Server manual.
- ``validation_level``: specifies how strictly the database should apply
  the validation rules to existing documents during update operations.
  To learn more about specifying a validation level, see :manual:`validationLevel
  </reference/command/collMod/?utm_source=compass&utm_medium=product#mongodb-collflag-validationLevel>` in the Server manual.
- ``validation_action``: specifies whether the database should raise an
  error or a warning if inserted documents do not adhere to the
  validation rules. To learn more about specifying a validation action, see :manual:`validationAction
  </reference/command/collMod/?utm_source=compass&utm_medium=product#mongodb-collflag-validationAction>` in the Server manual.

This example creates a collection called ``survey_answers`` with the
following document validation specifications:

- The ``validator`` setting specifies that the ``answer`` field in each
  document must have a value of ``"never"``, ``"sometimes"``, ``"often"``, or
  ``"always"``.
- The ``validation_action`` setting specifies that the driver should
  raise an error if a write operation violates the validation rule.
- The ``validation_level`` setting specifies that the validation is
  ``Moderate``, so the validation rules apply only to inserts and
  updates on existing valid documents.

.. literalinclude:: /includes/fundamentals/code-snippets/db-coll.rs
   :language: rust
   :dedent:
   :start-after: begin-document-validation
   :end-before: end-document-validation

With these document validation rules, you can successfully insert the
following document:

.. code-block:: json
   :copyable: false

   {
     "_id": { ... },
     "question": "How often do you listen to music when exercising?",
     "answer": "often"
   }

However, if you attempt to insert the following document, the driver
raises an error because the value of ``answer`` does not match any of
the valid options:

.. io-code-block::
   :copyable: false

   .. input::
      :language: json

      {
        "_id": { ... },
        "question": "How often do you listen to music when exercising?",
        "answer": "most of the time"
      }

   .. output::
      :language: none
      :visible: false

      Error: Error { kind: Write(WriteError(WriteError { code: 121, code_name:
      None, message: "Document failed validation", details:
      Some(Document({"failingDocumentId":
      ObjectId("..."), "details":
      Document({"operatorName": String("$jsonSchema"), "title": String("Answer
      Value Validation"), ... })})) })), ... }

To learn more about document validation, see :manual:`Schema Validation
</core/schema-validation/>` in the Server manual.

.. _addl-info-db-coll:

Additional Information
----------------------

For more information about the concepts in this guide, see the following documentation:

- :ref:`Insert Documents <rust-insert-guide>`
- :manual:`Databases and Collections </core/databases-and-collections/>`
- :manual:`Documents </core/document/>`
- :manual:`Schema Validation </core/schema-validation/>`

API Documentation
~~~~~~~~~~~~~~~~~

- `Client <{+api+}/struct.Client.html>`__
- `ClientOptions <{+api+}/options/struct.ClientOptions.html>`__
- `database() <{+api+}/struct.Client.html#method.database>`__
- `database_with_options() <{+api+}/struct.Client.html#method.database_with_options>`__
- `default_database() <{+api+}/struct.Client.html#method.default_database>`__
- `Database <{+api+}/struct.Database.html>`__
- `list_database_names() <{+api+}/struct.Client.html#method.list_database_names>`__
- `list_databases() <{+api+}/struct.Client.html#method.list_databases>`__
- `drop() for Database <{+api+}/struct.Database.html#method.drop>`__
- `collection() <{+api+}/struct.Database.html#method.collection>`__
- `collection_with_options() <{+api+}/struct.Database.html#method.collection_with_options>`__
- `CollectionOptions <{+api+}/options/struct.CollectionOptions.html>`__
- `Collection <{+api+}/struct.Collection.html>`__
- `list_collection_names() <{+api+}/struct.Database.html#method.list_collection_names>`__
- `list_collections() <{+api+}/struct.Database.html#method.list_collections>`__
- `WriteConcern <{+api+}/options/struct.WriteConcern.html>`__
- `drop() for Collection <{+api+}/struct.Collection.html#method.drop>`__
- `create_collection() <{+api+}/struct.Database.html#method.create_collection>`__
- `CreateCollectionOptions <{+api+}/options/struct.CreateCollectionOptions.html>`__
- `validator <{+api+}/options/struct.CreateCollectionOptions.html#structfield.validator>`__
- `validation_level <{+api+}/options/struct.CreateCollectionOptions.html#structfield.validation_level>`__
- `validation_action <{+api+}/options/struct.CreateCollectionOptions.html#structfield.validation_action>`__
- `ValidationAction <{+api+}/options/enum.ValidationAction.html>`__
- `ValidationLevel <{+api+}/options/enum.ValidationLevel.html>`__
