.. _rust-db-coll:

=========================
Databases and Collections
=========================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

In this guide, you can learn how to use the {+driver-short+} to access
and manage MongoDB databases and collections.

MongoDB organizes data in a hierarchal structure, in which data exists as
**documents** that are grouped into **collections**. A **database** contains
one or more collections.

To learn more about the document data format,
see :manual:`Documents </core/document/>` in the Server manual.

Access a Database
-----------------

You can access a database by calling the following methods on a ``Client``
instance:

- ``database()``: access a database by its name
- ``database_with_options()``: set options (``DatabaseOptions``) while accessing a database
- ``default_database()``: access the default database specified in the
  ``ClientOptions`` instance or connection string used to create the
  ``Client`` instance

The preceding methods return a ``Database`` instance, which you can use
to perform database-level operations and access collections that the
database contains. If you perform an insert operation on a
collection of a nonexistent database, the server implicitly creates the
database and collection.

The following example uses the ``database()`` method to access a
database called ``test_db``:

.. literalinclude:: /includes/fundamentals/code-snippets/db-coll.rs
   :language: rust
   :dedent:
   :start-after: begin-database
   :end-before: end-database

List Databases
~~~~~~~~~~~~~~
   
To see a list of your deployment's databases, call the
``list_database_names()`` method on your ``Client`` instance. This
method returns a ``Vec<String>`` type, a vector containing the database
names as strings.

The following example shows how to print a list of databases by using
the ``list_database_names()`` method:

.. io-code-block::

   .. input:: /includes/fundamentals/code-snippets/db-coll.rs
      :start-after: begin-list-db
      :end-before: end-list-db
      :language: rust
      :dedent:
   
   .. output::
      :language: console
      :visible: false
   
      ["admin", "local", "test_db", ...]

To see detailed information about each database, call the ``list_databases()``
method on your ``Client`` instance. This method returns a
``Vec<DatabaseSpecification>`` type. The ``DatabaseSpecification`` type
contains fields describing each database, such as its size and whether
it contains data.

Drop a Database
~~~~~~~~~~~~~~~

To drop a database, call the ``drop()`` method
on your ``Database`` instance. Calling this method permanently deletes
all of the data in the database's collections. The following code shows
how to drop a database:

.. literalinclude:: /includes/fundamentals/code-snippets/db-coll.rs
   :language: rust
   :dedent:
   :start-after: begin-drop-db
   :end-before: end-drop-db

.. warning:: Dropping a Database Deletes Data

   Dropping a database permanently deletes all
   documents in the database's collections and all indexes on those collections.
   You should drop only databases that contain data that you no longer
   need to access.

API Documentation
~~~~~~~~~~~~~~~~~

To learn more about any of the methods or types discussed in this
section, see the following API Documentation:

- `Client <{+api+}/struct.Client.html>`__
- `ClientOptions <{+api+}/options/struct.ClientOptions.html>`__
- `database() <{+api+}/struct.Client.html#method.database>`__
- `database_with_options() <{+api+}/struct.Client.html#method.database_with_options>`__
- `default_database() <{+api+}/struct.Client.html#method.default_database>`__
- `Database <{+api+}/struct.Database.html>`__
- `list_database_names() <{+api+}/struct.Client.html#method.list_database_names>`__
- `list_databases() <{+api+}/struct.Client.html#method.list_databases>`__
- `drop() for Database <{+api+}/struct.Database.html#method.drop>`__

Access a Collection
-------------------

You can access a collection by calling the following methods on a ``Database``
instance:

- ``collection()``: access a collection by its name
- ``collection_with_options()``: set options (``CollectionOptions``) while accessing a collection

The preceding methods return a ``Collection`` instance. If you
perform an insert operation on a nonexistent collection, the server
implicitly creates the collection. To learn how to explicitly create a collection,
see the :ref:`Create a Collection <rust-create-collection>` section of this guide.

This example uses the ``collection_with_options()`` method to
perform the following actions:

- Access a collection called ``coll_xyz``
- Set a write preference on the collection in the ``CollectionOptions`` type

.. literalinclude:: /includes/fundamentals/code-snippets/db-coll.rs
   :language: rust
   :dedent:
   :start-after: begin-coll
   :end-before: end-coll

To learn more about write concerns, see :manual:`Write Concern </reference/write-concern/>` in
the Server manual.

.. important:: Parameterized Collections
   
   You must parameterize your ``Collection`` instance by specifying what
   data type, such as ``Document``, it contains. The ``Collection``
   methods that accept or return instances of the documents in the
   collection accept or return instances of this generic parameter.

   The following example shows equivalent ways of parameterizing a
   collection with the ``Document`` type:

   .. code-block:: rust
      :copyable: false
      
      let my_coll: Collection<Document> = client.database("test_db").collection("coll_xyz");
      let my_coll = client.database("test_db").collection::<Document>("coll_xyz");

   We recommend that you define and parameterize your collection with a
   type that models your data instead of the ``Document`` type. By
   using a custom type, you can avoid repeated serialization code
   and improve your application's performance.

.. TODO in the prev admonition, link to serialization guide

List Collections
~~~~~~~~~~~~~~~~

To see a list of collections in a database, call the
``list_collection_names()`` method on your ``Database`` instance. This
method returns a ``Vec<String>`` type, a vector containing the
collection names as strings.

The following example shows how to print a list of collections in a
database by using the ``list_collection_names()`` method:

.. io-code-block::

   .. input:: /includes/fundamentals/code-snippets/db-coll.rs
      :start-after: begin-list-coll
      :end-before: end-list-coll
      :language: rust
      :dedent:
   
   .. output::
      :language: console
      :visible: false
   
      ["my_coll", "coll_xyz", ...]

To see detailed information about each collection, call the ``list_collections()``
method on your ``Database`` instance. This method returns a
``Vec<CollectionSpecification>`` type. The ``CollectionSpecification`` type
contains fields describing each collection, such as its type and settings.

Drop a Collection
~~~~~~~~~~~~~~~~~

To drop a collection, call the ``drop()`` method
on your ``Collection`` instance. Calling this method permanently deletes
all of the data in the collection and any indexes on that collection.
The following code shows how to drop a collection:

.. literalinclude:: /includes/fundamentals/code-snippets/db-coll.rs
   :language: rust
   :dedent:
   :start-after: begin-drop-coll
   :end-before: end-drop-coll

.. warning:: Dropping a Collection Deletes Data

   Dropping a collection from your database permanently deletes all
   documents within that collection and all indexes on that collection.
   You should drop only collections that contain data that you no longer
   need to access.

API Documentation
~~~~~~~~~~~~~~~~~

To learn more about any of the methods or types discussed in this
section, see the following API Documentation:

- `collection() <{+api+}/struct.Database.html#method.collection>`__
- `collection_with_options() <{+api+}/struct.Database.html#method.collection_with_options>`__
- `CollectionOptions <{+api+}/options/struct.CollectionOptions.html>`__
- `Collection <{+api+}/struct.Collection.html>`__
- `list_collection_names() <{+api+}/struct.Database.html#method.list_collection_names>`__
- `list_collections() <{+api+}/struct.Database.html#method.list_collections>`__
- `WriteConcern <{+api+}/options/struct.WriteConcern.html>`__
- `drop() for Collection <{+api+}/struct.Collection.html#method.drop>`__

.. _rust-create-collection:

Create a Collection
-------------------

You can explicitly create a collection by calling the
``create_collection()`` method on a ``Database`` instance. This method
takes the collection name and an optional ``CreateCollectionOptions``
type as parameters.

The following code shows how to create a collection called ``coll_abc``:

.. literalinclude:: /includes/fundamentals/code-snippets/db-coll.rs
   :language: rust
   :dedent:
   :start-after: begin-create-coll
   :end-before: end-create-coll

While creating a collection, you can implement document validation to
maintain a consistent document schema and control which write operations
succeed. To learn how to enable this feature, see the guide on :ref:`rust-doc-validation`.

API Documentation
~~~~~~~~~~~~~~~~~

To learn more about any of the methods or types discussed in this
section, see the following API Documentation:

- `create_collection() <{+api+}/struct.Database.html#method.create_collection>`__
- `CreateCollectionOptions <{+api+}/options/struct.CreateCollectionOptions.html>`__

.. _addl-info-db-coll:

Additional Information
----------------------

For more information about the concepts in this guide, see the following documentation:

- :ref:`Insert Documents <rust-insert-guide>`
- :manual:`Databases and Collections </core/databases-and-collections/>`
- :manual:`Documents </core/document/>`
- :manual:`Schema Validation </core/schema-validation/>`

To learn how to run a database command, see :ref:`rust-run-command`.
