.. _rust-doc-validation:

===================
Document Validation
===================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

In this guide, you can learn how to use the {+driver-short+} to implement
**document validation** for your MongoDB collections.

Document validation lets you restrict the types of documents that
can exist in a collection. If you implement document validation, the
server allows you to execute only write operations that follow the
validation rules.

You can implement document validation when creating a collection or by
running the ``db.collMod()`` MongoDB Shell command on an existing
collection. This guide will describe only how to enable document
validation while creating a collection with methods available in the
{+driver-short+}.

Implement Document Validation
-----------------------------

You can implement document validation by specifying fields in a
``CreateCollectionOptions`` instance that you pass to the
``create_collection()`` method.

Set the following fields in a ``CreateCollectionOptions`` instance to
specify the validation rules for your collection:

- ``validator``: specifies a validator to restrict the schema of
  documents.
  
  To learn more about this setting, see :manual:`validator
  </reference/command/collMod/#mongodb-collflag-validator>` in the Server manual.

- ``validation_level``: specifies how strictly the database should apply
  the validation rules to existing documents during update operations.
  
  Possible values: ``ValidationLevel::Off``,
  ``ValidationLevel::Strict``, ``ValidationLevel::Moderate``.
  
  To learn more about this setting, see :manual:`validationLevel
  </reference/command/collMod/#mongodb-collflag-validationLevel>` in the Server manual.

- ``validation_action``: specifies whether the database should raise an
  error or a warning if you insert documents that don't follow the
  validation rules.
  
  Possible values: ``ValidationAction::Error``, ``ValidationAction::Warn``.
  
  To learn more about this setting, see :manual:`validationAction
  </reference/command/collMod/#mongodb-collflag-validationAction>` in the Server manual.

Example
~~~~~~~

This example creates a collection called ``survey_answers`` with the
following validation specifications:

- The ``validator`` setting specifies that the ``answer`` field in each
  document must have a value of ``"inaccurate"`` or ``"accurate"``.
- The ``validation_action`` setting specifies that the driver should
  raise an error if a write operation violates the validation rule.
- The ``validation_level`` setting specifies that the validation is
  ``Moderate``, so the validation rules apply only to inserts and
  updates on existing valid documents.

.. literalinclude:: /includes/fundamentals/code-snippets/db-coll.rs
   :language: rust
   :dedent:
   :start-after: begin-document-validation
   :end-before: end-document-validation
   :emphasize-lines: 6-10

When you set these document validation rules, you can successfully insert the
following documents:

.. code-block:: json
   :copyable: false
   :emphasize-lines: 4, 9

   {
     "_id": { ... },
     "question": "I like to exercise.",
     "answer": "accurate"
   },
   {
     "_id": { ... },
     "question": "I like to play computer games.",
     "answer": "inaccurate"
   }

However, if you attempt to insert the following document, the driver
raises an error because the value of ``answer`` does not match any of
the valid options:

.. io-code-block::
   :copyable: false

   .. input::
      :language: json
      :emphasize-lines: 4

      {
        "_id": { ... },
        "question": "I like to exercise.",
        "answer": "depends on my mood"
      }

   .. output::
      :language: none
      :visible: false

      Error: Error { kind: Write(WriteError(WriteError { code: 121, code_name:
      None, message: "Document failed validation", details:
      Some(Document({"failingDocumentId":
      ObjectId("..."), "details":
      Document({"operatorName": String("$jsonSchema"), "title": String("Answer
      Value Validation"), ... })})) })), ... }

.. tip:: Bypass Document Validation
   
   If you need to perform a write operation that violates a collection's
   validation rules, you can set the ``bypass_document_validation``
   field to ``true`` in the write method's options parameter.
   
   To see an example of how to specify this setting in the options for the
   ``insert_one()`` method, see the :ref:`Modify insert_one Behavior
   <rust-insertone-bypass-validation-ex>` section of the Insert Documents guide.

To learn more about document validation, see :manual:`Schema Validation
</core/schema-validation/>` in the Server manual.

API Documentation
-----------------

To learn more about any of the methods or types discussed in this
guide, see the following API Documentation:

- `create_collection() <{+api+}/struct.Database.html#method.create_collection>`__
- `CreateCollectionOptions <{+api+}/options/struct.CreateCollectionOptions.html>`__
- `validator <{+api+}/options/struct.CreateCollectionOptions.html#structfield.validator>`__
- `validation_level <{+api+}/options/struct.CreateCollectionOptions.html#structfield.validation_level>`__
- `validation_action <{+api+}/options/struct.CreateCollectionOptions.html#structfield.validation_action>`__
- `ValidationAction <{+api+}/options/enum.ValidationAction.html>`__
- `ValidationLevel <{+api+}/options/enum.ValidationLevel.html>`__
- `insert_one() <{+api+}/struct.Collection.html#method.insert_one>`__
- `bypass_document_validation <{+api+}/options/struct.InsertOneOptions.html#structfield.bypass_document_validation>`__
