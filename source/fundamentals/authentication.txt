.. _rust-authentication:

=========================
Authentication Mechanisms
=========================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

In this guide, you can learn how to use the **authentication
mechanisms** available in the MongoDB Community Edition. By using an
authentication mechanism, you can confirm your identity and establish
trust between the driver and the server while connecting.

.. tip::
   
   .. TODO To learn how to authenticate to MongoDB by using ``GSSAPI/Kerberos`` or
   .. ``LDAP``, see the guide on :ref:`rust-enterprise-auth`.
   
   To learn more about connecting to a MongoDB deployment, see the
   :ref:`rust-connect-to-mongodb`.

This guide describes the following authentication mechanisms:

- :ref:`SCRAM-Based Mechanisms <rust-auth-scram-mechanisms>`
- :ref:`MongoDB-AWS Mechanism <rust-auth-aws>`
- :ref:`X.509 Mechanism <rust-auth-x509>`

You can specify an authentication mechanism, your credentials, and other
necessary information in the options in your connection string or in a
``Credential`` struct that you pass as an option when creating a client.
In this guide, the examples demonstrate how to configure
authentication in a ``Credential`` struct.

.. _rust-auth-scram-mechanisms:

SCRAM-Based Mechanisms
----------------------

Salted challenge-response authentication mechanism (SCRAM) refers to a
group of authentication mechanisms that use a username and
password to provide authentication of a user to a server. 

MongoDB supports the following SCRAM-based authentication mechanisms:

- :ref:`SCRAM-SHA-256 <rust-auth-scramsha256>`: an authentication mechanism that
  uses your username and password, encrypted with the ``SHA-256``
  algorithm, to authenticate your user
- :ref:`SCRAM-SHA-1 <rust-auth-scramsha1>`: an authentication mechanism that
  uses your username and password, encrypted with the ``SHA-1``
  algorithm, to authenticate your user

.. important:: Default Authentication Mechanism

   The default authentication mechanism is a SCRAM-based mechanism that
   depends on the version of the server that you are connecting to. The following
   table describes the default mechanism for recent server versions:

   .. list-table::
      :header-rows: 1
      :stub-columns: 1
      :class: compatibility-large
   
      * - Mechanism
        - MongoDB Server Versions
   
      * - ``SCRAM-SHA-256``
        - 4.0 and later
   
      * - ``SCRAM-SHA-1``
        - 3.0, 3.2, 3.4, and 3.6

   All earlier versions of MongoDB use the ``MONGODB-CR`` authentication
   mechanism as the default mechanism. This mechanism is currently
   deprecated and is not supported by the driver.

   To use the default authentication mechanism, omit only the
   ``mechanism`` field when you instantiate your ``Credential`` struct.
   This example uses the following placeholders:

   - ``username``: Your username
   - ``password``: Your password
   - ``db``: The authentication database associated with the user
   
   .. literalinclude:: /includes/fundamentals/code-snippets/auth.rs
      :language: rust
      :dedent:
      :start-after: start-default
      :end-before: end-default

.. _rust-auth-scramsha256:

SCRAM-SHA-256
~~~~~~~~~~~~~

To specify the ``SCRAM-SHA-256`` authentication mechanism, set the
``mechanism`` field of your ``Credential`` struct to
``AuthMechanism::ScramSha256``. This example specifies the
authentication mechanism using the following placeholders:

- ``username``: Your username
- ``password``: Your password
- ``db``: The authentication database associated with the user

.. literalinclude:: /includes/fundamentals/code-snippets/auth.rs
   :language: rust
   :dedent:
   :start-after: start-scramsha256
   :end-before: end-scramsha256

.. _rust-auth-scramsha1:

SCRAM-SHA-1
~~~~~~~~~~~

To specify the ``SCRAM-SHA-1`` authentication mechanism, set the
``mechanism`` field of your ``Credential`` struct to
``AuthMechanism::ScramSha1``. This example specifies the
authentication mechanism using the following placeholders:

- ``username``: Your username
- ``password``: Your password
- ``db``: The authentication database associated with the user

.. literalinclude:: /includes/fundamentals/code-snippets/auth.rs
   :language: rust
   :dedent:
   :start-after: start-scramsha1
   :end-before: end-scramsha1

.. _rust-auth-aws:

MongoDB-AWS Mechanism
---------------------

The ``MongoDB-AWS`` authentication mechanism uses your Amazon Web Services
Identity and Access Management (AWS IAM) credentials to authenticate your
user.

To use this authentication mechanism, you must add the ``aws-auth``
feature flag to your ``mongodb`` dependency in your project's
``Cargo.toml`` file. The following shows an example of what your
``mongodb`` dependency feature list should include to enable the
``MongoDB-AWS`` authentication mechanism:

.. code-block:: none
   :emphasize-lines: 3
   
   [dependencies.mongodb]
   version = "{+version+}"
   features = [ "aws-auth", ... ]

.. important::

   The ``MongoDB-AWS`` authentication mechanism is available only if you
   are connected to a deployment running MongoDB Server version 4.4 or
   later.
   
   Additionally, the driver only supports the ``MongoDB-AWS``
   authentication mechanism if you are using the ``tokio`` asynchronous
   runtime.

The driver obtains the credentials only from the first source in which
they are found. The driver checks for your credentials in the following
sources in the following order:

1. ``Credential`` struct or connection string
#. Environment variables
#. Web identity token file
#. AWS ECS endpoint specified in the ``AWS_CONTAINER_CREDENTIALS_RELATIVE_URI``
   environment variable
#. AWS EC2 endpoint. For more information, see `IAM Roles for Tasks
   <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-iam-roles.html>`__
   in the AWS documentation.

For example, if you specify your AWS credentials in your connection string, the
driver uses those credentials and ignores any that you might have
specified in environment variables.

Select from the :guilabel:`Credential Struct`, :guilabel:`Environment
Variables`, and :guilabel:`Web Identity Token File` tabs below for
code samples that demonstrate how to set your AWS IAM credentials in
the corresponding ways.

.. tabs::

   .. tab:: Credential Struct
      :tabid: credential struct

      .. tip::

         If you specify your AWS IAM credentials in your connection
         string, you must URL encode the username and password to ensure
         that the driver correctly parses the values. To learn more
         about URL encoding, see the Wikipedia entry on
         :wikipedia:`Percent-encoding
         <w/index.php?title=Percent-encoding&oldid=1171395281>`.

      To connect to your MongoDB instance using your AWS IAM credentials, perform the
      following steps:

      - Set the ``mechanism`` option to ``AuthMechanism::MongoDbAws``.
      - Set the ``username`` option to the value of your AWS access key ID.
      - Set the ``password`` option to the value of your AWS secret
        access key.
      - Set the ``source`` option to the name of the authentication
        database associated with the user.
      - Create a document that contains the value of your AWS session
        token, and then set the ``mechanism_properties`` option to this
        document. If you are not using temporary credentials, you can
        omit this option.

      .. tip::

         You can obtain temporary AWS IAM credentials from a Security
         Token Service (STS) Assume Role request. Learn more about
         this process in the `AssumeRole AWS documentation <https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRole.html>`__.

      The following code shows how to define a ``Credential`` struct
      with placeholder AWS IAM credentials and connect to MongoDB. If
      you are not using temporary credentials, omit line 6 of the code example.

      .. literalinclude:: /includes/fundamentals/code-snippets/auth.rs
         :language: rust
         :dedent:
         :start-after: start-aws
         :end-before: end-aws
         :linenos:

   .. tab:: Environment Variables
      :tabid: environment variables

      To store your AWS credentials in environment variables, run the
      following commands in your shell:

      .. code-block:: bash

         export AWS_ACCESS_KEY_ID=<access key ID>
         export AWS_SECRET_ACCESS_KEY=<secret access key>
         export AWS_SESSION_TOKEN=<session token>

      .. note::

         If you are not using an AWS session token, omit the line
         that sets the ``AWS_SESSION_TOKEN`` environment variable.

      You can then authenticate by setting the ``mechanism`` option in your
      ``Credential`` struct to ``AuthMechanism::MongoDbAws``. The driver
      reads the rest of the credentials from your environment variables.
      The following code shows how to define a ``Credential`` struct
      with AWS authentication specified and connect to MongoDB:

      .. literalinclude:: /includes/fundamentals/code-snippets/auth.rs
         :language: rust
         :dedent:
         :start-after: start-aws-env-var
         :end-before: end-aws-env-var

   .. tab:: Web Identity Token File
      :tabid: web-identity-token-file

      You can use the OpenID Connect (OIDC) token obtained from a web
      identity provider to authenticate to Amazon Elastic Kubernetes
      Service (EKS) or other services. To use an OIDC token, create a
      file that contains your token, then define an environment variable
      whose value is the absolute path to the token file as shown in the
      following shell command:

      .. code-block:: bash

         export AWS_WEB_IDENTITY_TOKEN_FILE=<absolute path to OIDC token file>
      
      You can then authenticate by setting the ``mechanism`` option in your
      ``Credential`` struct to ``AuthMechanism::MongoDbAws``. The driver
      reads the rest of the credentials from the token file.
      The following code shows how to define a ``Credential`` struct
      with AWS authentication specified and connect to MongoDB:

      .. literalinclude:: /includes/fundamentals/code-snippets/auth.rs
         :language: rust
         :dedent:
         :start-after: start-aws-env-var
         :end-before: end-aws-env-var

.. _rust-auth-x509:

X.509 Mechanism
---------------

The X.509 authentication mechanism uses Transport Level Security (TLS)
with X.509 certificates to authenticate your user, which is identified
by the relative distinguished names (RDNs) of your client certificate.

.. tip::
   
   To learn more about TLS, see the Wikipedia entry on
   :wikipedia:`Transport Layer Security <w/index.php?title=Transport_Layer_Security&oldid=1172659512>`.

When you specify this authentication mechanism, the server authenticates
the connection by reading the following files:

- A certificate authority (CA) file, which contains one or more
  certificate authorities to trust when making a TLS connection
- A certificate key file, which references the client certificate private key

To specify the X.509 authentication mechanism, perform the following
steps:

- Set the ``tlsCAFile`` connection string option to the filepath for
  your CA file.
- Set the ``tlsCertificateKeyFile`` connection string option to the filepath for
  your certificate key file.
- Set the ``mechanism`` option in your ``Credential`` struct to
  ``AuthMechanism::MongoDbX509``.

The following code shows how to reference your certificates in your
connection string, specify the X.509 authentication mechanism, and
connect to MongoDB:

.. literalinclude:: /includes/fundamentals/code-snippets/auth.rs
   :language: rust
   :dedent:
   :start-after: start-x509
   :end-before: end-x509

.. TODO To learn more about enabling TLS on a connection, see :ref:`rust-tls`.

Additional Information
----------------------

To learn more about authenticating to MongoDB, see
:manual:`Authentication </core/authentication/>` in the Server manual.

To learn more about managing users of your MongoDB deployment, see
:manual:`Users </core/security-users/>` in the Server manual.

API Documentation
~~~~~~~~~~~~~~~~~

To learn more about the methods and types discussed in this
guide, see the following API Documentation:

- `Credential <{+api+}/options/struct.Credential.html>`__
- `ClientOptions <{+api+}/options/struct.ClientOptions.html>`__
- `Client <{+api+}/options/struct.Client.html>`__
- `with_options() <{+api+}/struct.Client.html#method.with_options>`__
- `parse() <{+api+}/options/struct.ClientOptions.html#method.parse>`__
