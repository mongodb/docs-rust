.. _rust-authentication:

=========================
Authentication Mechanisms
=========================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

In this guide, you can learn how to use the **authentication
mechanisms** available in the MongoDB Community Edition. By using an
authentication mechanism, you can confirm your identity and establish
trust between the driver and the server while connecting.

.. tip::
   
   To learn how to authenticate to MongoDB by using ``GSSAPI/Kerberos`` or
   ``LDAP``, see the guide on :ref:`rust-enterprise-auth`.
   
   To learn more about connecting to a MongoDB deployment, see the
   :ref:`rust-connect-to-mongodb`.

This guide describes the following authentication mechanisms:

- :ref:`SCRAM-Based Mechanisms <rust-auth-scram-mechanisms>`
- :ref:`Amazon Web Services Authentication <rust-auth-aws>`
- :ref:`X.509 <>`

You can specify an authentication mechanism, your credentials, and other
necessary information in the options in your connection string or in a
``Credential`` struct that you pass as an option when creating a client.
In this guide, the examples demonstrate how to configure
authentication in a ``Credential`` struct.

.. _rust-auth-scram-mechanisms:

SCRAM-Based Mechanisms
----------------------

Salted challenge-response authentication mechanism (SCRAM) refers to a
group of authentication mechanisms that use a username and
password to provide authentication of a user to a server. 

MongoDB supports the following SCRAM-based authentication mechanisms:

- :ref:`SCRAM-SHA-256 <rust-auth-scramsha256>`: an authentication mechanism that
  uses your username and password, encrypted with the ``SHA-256``
  algorithm, to authenticate your user
- :ref:`SCRAM-SHA-1 <rust-auth-scramsha1>`: an authentication mechanism that
  uses your username and password, encrypted with the ``SHA-1``
  algorithm, to authenticate your user

.. important:: Default Authentication Mechanism

   The default authentication mechanism is a SCRAM-based mechanism that
   depends on the version of the server that you are connecting to. The following
   table describes the default mechanism for recent server versions:

   .. list-table::
      :header-rows: 1
      :stub-columns: 1
      :class: compatibility-large
   
      * - Mechanism
        - MongoDB Server Versions
   
      * - ``SCRAM-SHA-256``
        - 4.0 and later
   
      * - ``SCRAM-SHA-1``
        - 3.0, 3.2, 3.4, and 3.6

   All earlier versions of MongoDB use the ``MONGODB-CR`` authentication
   mechanism as the default mechanism.

   To use the default authentication mechanism, omit only the
   ``mechanism`` field when you instantiate your ``Credential`` struct.
   This example uses the following placeholders:

   - ``username``: Your username
   - ``password``: Your password
   - ``auth_db``: The authentication database associated with the user
   
   .. literalinclude:: /includes/fundamentals/code-snippets/auth.rs
      :language: rust
      :dedent:
      :start-after: start-default
      :end-before: end-default

.. _rust-auth-scramsha256:

``SCRAM-SHA-256``
~~~~~~~~~~~~~~~~~

To specify the ``SCRAM-SHA-256`` authentication mechanism, set the
``mechanism`` field of your ``Credential`` struct to
``AuthMechanism::ScramSha256``. This example specifies the
authentication mechanism using the following placeholders:

- ``username``: Your username
- ``password``: Your password
- ``auth_db``: The authentication database associated with the user

.. literalinclude:: /includes/fundamentals/code-snippets/auth.rs
   :language: rust
   :dedent:
   :start-after: start-scramsha256
   :end-before: end-scramsha256

.. _rust-auth-scramsha1:

``SCRAM-SHA-1``
~~~~~~~~~~~~~~~

To specify the ``SCRAM-SHA-1`` authentication mechanism, set the
``mechanism`` field of your ``Credential`` struct to
``AuthMechanism::ScramSha1``. This example specifies the
authentication mechanism using the following placeholders:

- ``username``: Your username
- ``password``: Your password
- ``auth_db``: The authentication database associated with the user

.. literalinclude:: /includes/fundamentals/code-snippets/auth.rs
   :language: rust
   :dedent:
   :start-after: start-scramsha1
   :end-before: end-scramsha1

.. _rust-auth-aws:

Amazon Web Services Authentication
----------------------------------

The ``MongoDB-AWS`` authentication mechanism uses your Amazon Web Services
Identity and Access Management (AWS IAM) credentials to authenticate your
user.

.. important::

   The ``MongoDB-AWS`` authentication mechanism is available only if you
   are connected to a deployment running MongoDB Server version 4.4 or
   later.
   
   Additionally, the driver only supports the ``MongoDB-AWS``
   authentication mechanism if you are using the ``tokio`` asynchronous
   runtime.

The driver obtains the credentials only from the first source in which
they are found. The driver checks for your credentials in the following
sources in the following order:

1. ``Credential`` struct or connection string
#. Environment variables
#. Web identity token file
#. AWS ECS endpoint specified in the ``AWS_CONTAINER_CREDENTIALS_RELATIVE_URI``
   environment variable
#. AWS EC2 endpoint. For more information, see `IAM Roles for Tasks
   <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-iam-roles.html>`__
   in the AWS documentation.

For example, if you specify your AWS credentials in your connection string, the
driver uses those credentials and ignores any that you might have
specified in environment variables.

Select from the :guilabel:`Credential Struct`, :guilabel:`Async` tabs below for
corresponding connection code samples.
This example specifies the
authentication mechanism using the following placeholders:

- ``username``: Your username
- ``password``: Your password
- ``auth_db``: The authentication database associated with the user

.. tabs::

   .. tab:: Credential Struct
      :tabid: credential struct

      .. tip::

         The following examples set the appropriate credentials by using the ``SetAuth()`` 
         method. You can also specify these credentials by using the ``ApplyURI()`` 
         method. If you use the ``ApplyURI()`` method you must URL encode the username 
         and password to ensure they are correctly parsed.
   
      To connect to your MongoDB instance using your AWS IAM credentials, perform the
      following steps:

      - Assign the ``AuthMechanism`` option the value ``MONGODB-AWS``
      - Assign the ``Username`` option the value of your ``accessKeyID``
      - Assign the ``Password`` option the value of your ``secretAccessKey``
      - Assign the ``AuthMechanismProperties`` option to the value of
        your ``sessionToken``. If you are not using temporary
        credentials, you can omit this option.

      The following code shows... If you are not using temporary
      credentials, omit lines... 

      .. literalinclude:: /includes/fundamentals/code-snippets/authentication/aws-connection-string.go
         :language: go

      If you need to specify an AWS session token, use the temporary
      credentials returned from an `assume role request <https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRole.html>`__.
      
      To use temporary credentials, assign the value of your ``sessionToken`` to 
      the ``AuthMechanismProperties`` option:

      .. literalinclude:: /includes/fundamentals/code-snippets/authentication/aws-connection-string-session-token.go
         :language: go

   .. tab:: Environment Variables
      :tabid: environment variables

      To authenticate to your MongoDB instance using AWS credentials stored in
      environment variables, use a shell to set the variables as follows:

      .. code-block:: bash

         export AWS_ACCESS_KEY_ID=<awsKeyId>
         export AWS_SECRET_ACCESS_KEY=<awsSecretKey>
         export AWS_SESSION_TOKEN=<awsSessionToken>

      .. note::

         If you don't need an AWS session token for the role you're
         authenticating with, omit the line containing ``AWS_SESSION_TOKEN`` .

      After you've set the preceding environment variables, specify the ``MONGODB-AWS``
      authentication mechanism as shown in the following example:

      .. literalinclude:: /includes/fundamentals/code-snippets/authentication/aws-environment-variables.go
         :language: go

   .. tab:: Web Identity Token File
      :tabid: web-identity-token-file

      You can use the OpenID Connect (OIDC) token obtained from a web identity provider to authenticate
      to Amazon Elastic Kubernetes Service (EKS) or other services.
      To use an OIDC token, create a file that contains your token, then 
      set the absolute path to this file in an environment variable by using
      a shell as shown in the following example:

      .. code-block:: bash

         export AWS_WEB_IDENTITY_TOKEN_FILE=<absolute path to file containing your OIDC token>

      After you've set the preceding environment variable, specify the ``MONGODB-AWS``
      authentication mechanism as shown in the following example:

      .. literalinclude:: /includes/fundamentals/code-snippets/authentication/aws-environment-variables.go
         :language: go

.. _golang-x509:

``X.509``
~~~~~~~~~

The ``X.509`` authentication mechanism uses
:wikipedia:`TLS <Transport_Layer_Security>` with X.509 certificates to
authenticate your user, identified by the relative distinguished names
(RDNs) of your client certificate. When you specify the ``X.509``
authentication mechanism, the server authenticates the connection using
the paths of the following files:

- ``tlsCAFile`` which contains either a single or a bundle of certificate authorities to trust when making a TLS connection
- ``tlsCertificateKeyFile`` which references the path to the client certificate file or the client private key file

To specify the ``X.509`` authentication mechanism, perform the
following:

- Assign the ``tlsCAFile`` the path to its file in the connection string
- Assign the ``tlsCertificateKeyFile`` the path to its file in the connection string
- Assign the ``AuthMechanism`` option the value ``"MONGODB-X509"``

.. code-block:: go
   :emphasize-lines: 4-5, 7

   caFilePath := "<cafile_path>"
   certificateKeyFilePath := "<client_certificate_path>"

   uri := "mongodb://<hostname>:<port>/?tlsCAFile=%s&tlsCertificateKeyFile=%s"
   uri = fmt.Sprintf(uri, caFilePath, certificateKeyFilePath)
   credential := options.Credential{
      AuthMechanism: "MONGODB-X509",
   }

   clientOpts := options.Client().ApplyURI(uri).SetAuth(credential)


Example Conventions
~~~~~~~~~~~~~~~~~~~

Each authentication mechanism contains the following placeholders:

* ``username`` - Your MongoDB username
* ``password`` - Your MongoDB user's password
* ``hostname`` - Your MongoDB servers network address, accessible by
  your client
* ``port`` - Your MongoDB servers port number
* ``authenticationDb`` - Your MongoDB database that contains the user's
  authentication data. If you omit this option, the driver uses the
  default value ``admin``.

..
  To learn more about configuring your application to use
  certificates as well as TLS/SSL options, see
  :ref:`golang-tls-ssl-guide`.