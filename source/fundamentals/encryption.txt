.. _rust-encryption:

=================
In-Use Encryption
=================

.. facet::
   :name: genre
   :values: reference

.. meta::
   :keywords: privacy, security

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

You can use the {+driver-short+} to encrypt document fields by using a
set of features called **in-use encryption**. In-use encryption allows
your application to encrypt data *before* sending it to MongoDB
and query documents with encrypted fields.

Because the driver encrypts the data before sending it to MongoDB, only
your configured applications can decrypt the data. Only applications
that have access to your encryption keys can access the decrypted,
plaintext data. In the event of a security breach, a potential attacker
sees only encrypted, ciphertext data.

By implementing in-use encryption, you can avoid exposing the
following sensitive types of data:

- Credit card numbers
- Addresses
- Health information
- Financial information
- Any other sensitive or personally identifiable information (PII)

MongoDB offers the following features to encrypt fields:

- :ref:`Queryable Encryption <rust-qe>`
- :ref:`Client-side Field Level Encryption <rust-csfle>`

To enable in-use encryption, you must add the
``in-use-encryption-unstable`` feature flag to your ``mongodb``
dependency. To learn more about using in-use encryption in the
{+driver-short+}, see the `client_encryption module API documentation
<{+api+}/client_encryption/index.html>`__.

.. _rust-qe:

Queryable Encryption
--------------------

Queryable Encryption (QE) is the next-generation in-use encryption feature,
introduced in MongoDB Server version 6.0 and generally available (GA) in
Server version 7.0. QE supports searching encrypted fields for equality
and encrypts each value uniquely.

To learn how to use QE, see the :manual:`Queryable
Encryption Fundamentals </core/queryable-encryption/fundamentals/>`
guides in the Server manual.

To learn more about QE concepts, see the :manual:`Queryable
Encryption Reference </core/queryable-encryption/reference/>` in the
Server manual.

.. _rust-csfle:

Client-side Field Level Encryption
----------------------------------

Client-side Field Level Encryption (CSFLE) was introduced in MongoDB
Server version 4.2 and supports searching encrypted fields for equality.
CSFLE differs from Queryable Encryption in that it requires that the
encrypted fields be deterministically encrypted. When you
deterministically encrypt a value, the same input value produces the
same output value. While deterministic encryption provides greater 
support for read operations, encrypted data with low cardinality is
susceptible to recovery by using frequency analysis.

.. tip::

   To learn more about these concepts, see the following Wikipedia
   entries:

   - :wikipedia:`Cardinality <w/index.php?title=Cardinality_(data_modeling)&oldid=1182661589>`
   - :wikipedia:`Frequency Analysis <w/index.php?title=Frequency_analysis&oldid=1182536787>`

To learn how to use CSFLE, see the :manual:`CSFLE Fundamentals
</core/csfle/fundamentals/>` guides in the Server manual.

To learn more about CSFLE concepts, see the :manual:`CSFLE Reference
</core/csfle/reference/>` in the Server manual.
