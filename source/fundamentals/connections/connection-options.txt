.. _rust-connection-options:

================
Connection Options
================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

This section explains several common MongoDB connection and authentication
options. You can pass the connection options as parameters of the connection
URI to specify the behavior of the client.

.. list-table::
   :header-rows: 1
   :widths: 34 10 12 44

   * - Option Name
     - Type
     - Default Value
     - Description

   * - connect_timeout
     - ``Option<Duration>``
     - 10 seconds.
     - The connect timeout passed to each underlying TcpStream when attemtping to connect to the server.

   * - credential
     - ``Option<Credential>``
     - 
     - The credential to use for authenticating connections made by this client.

   * - direct_connection
     - ``Option<bool>``
     - false
     - Specifies whether the Client should directly connect to a single host rather than autodiscover all servers in the cluster.

   * - heartbeat_freq
     - ``Option<Duration>``
     - 10 seconds.
     - The amount of time each monitoring thread should wait between performing server checks.

   * - load_balanced
     - ``Option<bool>``
     - 
     - Whether or not the client is connecting to a MongoDB cluster through a load balancer.

   * - local_threshold
     - ``Option<Duration>``
     - 15 ms.
     - When running a read operation with a ReadPreference that allows selecting secondaries, local_threshold is used to determine how much longer the average round trip time between the driver and server is allowed compared to the least round trip time of all the suitable servers. For example, if the average round trip times of the suitable servers are 5 ms, 10 ms, and 15 ms, and the local threshold is 8 ms, then the first two servers are within the latency window and could be chosen for the operation, but the last one is not.
       A value of zero indicates that there is no latency window, so only the server with the lowest average round trip time is eligible.

   * - max_idle_time
     - ``Option<Duration>``
     - 
     - The amount of time that a connection can remain idle in a connection pool before being closed. A value of zero indicates that connections should not be closed due to being idle.
       By default, connections will not be closed due to being idle.

   * - max_pool_size
     - ``Option<u32>``
     - 10
     - The maximum amount of connections that the Client should allow to be created in a connection pool for a given server. If an operation is attempted on a server while max_pool_size connections are checked out, the operation will block until an in-progress operation finishes and its connection is checked back into the pool.

   * - min_pool_size
     - ``Option<u32>``
     - 0.
     - The minimum number of connections that should be available in a serverâ€™s connection pool at a given time. If fewer than min_pool_size connections are in the pool, connections will be added to the pool in the background until min_pool_size is reached.

   * - read_concern
     - ``Option<ReadConcern>``
     - 
     - Specifies the default read concern for operations performed on the Client. See the ReadConcern type documentation for more details.

   * - repl_set_name
     - ``Option<String>``
     - 
     -  The name of the replica set that the Client should connect to.

   * - retry_reads
     - ``Option<bool>``
     - true
     - Whether or not the client should retry a read operation if the operation fails.

   * - retry_writes
     - ``Option<bool>``
     - true
     - Whether or not the client should retry a write operation if the operation fails.

   * - server_selection_timeout
     - ``Option<Duration>``
     - 30 seconds
     - The amount of time the Client should attempt to select a server for an operation before timing outs

   * - tls
     - ``Option<Tls>``
     - ``None`` (By default, TLS is disabled.)
     - The TLS configuration for the Client to use in its connections with the server.

For a full list of options, see the `ClientOptions API
documentation
<{+api+}/mongo/options#ClientOptions>`__.

.. _rust-timeout-setting:

..
   Single Timeout Setting
   ~~~~~~~~~~~~~~~~~~~~~~

   You can set a single ``Timeout`` option on your ``Client`` to govern the
   amount of time that a single operation can take to execute using the
   ``SetTimeout()`` method or specifying the ``timeoutMS`` option in your
   connection URI string. ``Database``, ``Collection``,
   ``Session``, ``ChangeStream``, and ``Bucket`` instances elsewhere in
   your code inherit the ``Timeout`` option from ``Client`` if you do not set a
   Context for operations against the same entity. 

   If you pass a Context into an operation with a deadline, the driver uses
   that Context deadline for the operation. If the context does not have a
   deadline, the driver derives a new Context from the given Context using
   the ``Timeout`` option set on the ``Client``.

   .. note:: Retries under Timeout Specification

      With default settings, if you set a ``Timeout`` option on your ``Client``
      and your operation requires a retry, the driver retries the operation
      as many times as possible before the timeout expires. Once the timeout
      expires, the driver returns a timeout error. Versions 1.1 and later
      of the {+driver-short+} enable retryable reads and writes by default.
      See the Server manual for more information about :ref:`retryable
      reads <retryable-reads>` and :manual:`retryable writes </core/retryable-writes/>`.

   The following code shows how to set the ``Timeout`` option on a ``Client``
   with the ``SetTimeout`` option:

   .. code-block:: go

      opts := options.Client().SetTimeout(5 * time.Second)

   The following example shows how you can set a single timeout with the
   URI option and execute an operation that inherits this setting:

   .. code-block:: go

      uri := "mongodb://user:pass@sample.host:27017/?timeoutMS=5000"
      client := mongo.Connect(uri)
      coll := client.Database("<db>").Collection("<collection>")
      ...
      coll.InsertOne(context.Background(), doc)

   .. important:: Legacy Timeout Options

      ``SocketTimeout``, ``wTimeout``, ``MaxTime``, and ``MaxCommitTime``
      will be deprecated in an upcoming release. The driver ignores ``MaxTime`` and
      ``MaxCommitTime`` if you set ``Timeout``. The driver still honors
      ``SocketTimeout`` and ``wTimeout``, but these settings may result in
      undefined behavior. Consider using only the single timeout option instead.
