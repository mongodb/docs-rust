.. _rust-performance:

===========
Performance
===========

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

This guide contains best practices for optimizing performance of the MongoDB Rust client.
The ``Client`` handles many aspects of database connection behind the scenes that can require manual management for other database drivers;
it discovers server topology, monitors it for any changes, and maintains an internal connection pool.
This has implications for how a ``Client`` should be used for best performance.

.. _rust-performance-client-lifecycle:

Client Lifecycle
----------------

A ``Client`` instance should be as long-lived as possible.
Establishing a new ``Client`` instance is relatively slow and resource-intensive.
Ideally, a ``Client`` instance is created once at application startup.
Because the ``Client`` type is implemented using an internal ``Arc``,
it can safely be shared across threads or tasks.
Cloning it to pass to new contexts is extremely cheap.

Consider the following code.
It constructs and tears down a ``Client`` instnace with every request.

.. literalinclude:: /includes/fundamentals/code-snippets/performance.rs
   :language: rust
   :dedent:
   :start-after: start-perf-client-slow
   :end-before: end-perf-client-slow

Instead, pass a longer-lived ``Client`` instance to the handler function:

.. literalinclude:: /includes/fundamentals/code-snippets/performance.rs
   :language: rust
   :dedent:
   :start-after: start-perf-client-faster
   :end-before: end-perf-client-faster

This is evident when using a framework that provides connection pooling.
Because the ``Client`` type does its own pooling internally,
attempting to maintain a pool of ``Client`` instances will result in worse performance than using a single one.

.. _rust-performance-runtime:

Runtime
-------

A ``Client`` instance is bound to the instance of the ``tokio`` or ``async-std`` runtime in which it was created.
Attempting to execute operations on a different runtime instance can cause incorrect behavior and unpredictable failures.
This is easy to accidentally invoke when testing,
as the ``tokio::test`` or ``async_std::test`` helper macros create a new runtime for each test.

.. literalinclude:: /includes/fundamentals/code-snippets/performance-new-runtime.rs
   :language: rust
   :dedent:

To work around this issue, either create a new ``Client`` instance for every ``async`` test,
or bundle the runtime along with the ``Client`` instance and don't use the test helper macros.

.. literalinclude:: /includes/fundamentals/code-snippets/performance-bundle-runtime.rs
   :language: rust
   :dedent:

or

.. literalinclude:: /includes/fundamentals/code-snippets/performance-new-client.rs
   :language: rust
   :dedent:

.. _rust-performance-parallelism:
      
Parallelism
-----------

Where data operations are naturally parallelizable,
spawning many asynchronous tasks that use the driver concurrently is often the best way to achieve maximum performance,
as the driver is designed to work well in such situations.

.. literalinclude:: /includes/fundamentals/code-snippets/performance-parallel.rs
   :language: rust
   :dedent:

..
   Additional Information
   ----------------------

   For more information about the concepts in this guide, see the following documentation:

   - :manual:`db.runCommand() </reference/method/db.runCommand/>`
   - :manual:`Database Commands </reference/command/>`
   - :manual:`hello Command </reference/command/hello/>`
   - :manual:`explain Command </reference/command/explain/>`

   API Documentation
   ~~~~~~~~~~~~~~~~~

   - `run_command() <{+api+}/struct.Database.html#method.run_command>`__
   - `SelectionCriteria <{+api+}/options/enum.SelectionCriteria.html>`__
   - `ReadPreference <{+api+}/options/enum.ReadPreference.html>`__
