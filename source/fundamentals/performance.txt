.. _rust-performance:

==========================
Performance Considerations
==========================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

In this guide, you can learn how to optimize performance of the {+driver-short+}.
In the {+driver-short+}, you must create a ``Client`` instance to connect to MongoDB. Your ``Client``
instance automatically handles most aspects of connection, such as discovering server topology, monitoring
your connection, and maintaining an internal connection pool. This guide describes best practices to configure and use your ``Client`` instance.

.. _rust-performance-client-lifecycle:

Client Lifecycle
----------------

We recommend that you reuse your client across sessions and operations.
You can use the same Client instance to perform multiple tasks, instead of creating a new one each time.
The ``Client`` type is safe for concurrent use by multiple threads.

The ``Client`` automatically manages connection pooling.
When you create a single ``Client`` instance for multiple operations, you optimize its performance.
Cloning it to pass to new contexts is extremely cheap.
This means you can create a ``Client`` instance once at application startup and continually reuse it.

Creating a new ``Client`` instance for each request results in slower performance.
The following code accepts a pointer to an existing ``Client`` instance,
allowing many requests to share the same client:

.. literalinclude:: /includes/fundamentals/code-snippets/performance.rs
   :language: rust
   :dedent:
   :start-after: start-perf-client-faster
   :end-before: end-perf-client-faster

.. _rust-performance-runtime:

Runtime
-------

A ``Client`` instance is bound to the instance of the ``tokio`` or ``async-std`` runtime in which you created it.
If you use a ``Client`` instance to execute operations on a different runtime, you might experience unexpected behavior or failures.

If you are using the ``test`` helper macro from the ``tokio`` or ``async_std`` crate to test your application,
you might accidentally run operations on a different runtime than you intended.
This is because these helper macros create a new runtime for each test.
To avoid this issue, do one of the following:

- Attach the runtime to the ``Client`` instance without using the ``test`` helper macros.
- Create a new ``Client`` instance for every ``async`` test

As an example of the former, the following code lazily creates a global runtime used just for testing.
The client in the ``test_list_dbs`` then manually connects to this runtime.

.. literalinclude:: /includes/fundamentals/code-snippets/performance-bundle-runtime.rs
   :language: rust
   :dedent:

As an example of the latter,
the following code creates a new ``Client`` instance for each test run with ``tokio::test``.
This ensures there is no unintended interaction between runtimes.

.. literalinclude:: /includes/fundamentals/code-snippets/performance-new-client.rs
   :language: rust
   :dedent:

.. _rust-performance-parallelism:

Parallelism
-----------

If you can run parallel data operations, creating asynchronous, concurrent tasks achieves maximum performance.

.. TODO The following code

.. literalinclude:: /includes/fundamentals/code-snippets/performance-parallel.rs
   :language: rust
   :dedent:

API Documentation
-----------------

- `Client() <{+api+}/struct.Client.html>`__
- `sync <{+api+}/sync/index.html>`__

.. TODO link to Async page when done
