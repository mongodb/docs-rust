.. _rust-retrieve-guide:

==============
Retrieve Data
==============

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

In this guide, you can learn how to retrieve data from your MongoDB
collections using **read operations**.

Read operations allow you to perform the following actions:

- Retrieve documents from your collections by using :ref:`find
  operations <rust-retrieve-find>`
- Transform documents in your collections by using
  :ref:`aggregation operations <rust-retrieve-aggregation>`

Sample Data
~~~~~~~~~~~

.. TODO decide on structs in crud

To run the examples in this guide, load the sample data into a
collection called ``db.inventory`` with the following code:

.. literalinclude:: /includes/fundamentals/code-snippets/crud/retrieve.rs
   :language: rust
   :dedent:
   :start-after: begin-insert
   :end-before: end-insert

.. include:: /includes/fundamentals/automatic-creation.rst

Each document represents an item in a store's inventory and contains
information about its quantity and the last time a restock was ordered.

.. _rust-retrieve-find:

Find Operations
---------------

Use **find operations** to retrieve data from MongoDB. Find operations
consist of the ``find()`` and ``find_one()`` methods.

Find All Matching Documents
~~~~~~~~~~~~~~~~~~~~~~~~~~~

The ``find()`` method takes a query filter as a parameter. The method
returns *all* documents that match the filter criteria in a ``Cursor``
type.

.. TODO To learn how to access data from a cursor, see :ref:`rust-cursor-guide`.

Find One Document
~~~~~~~~~~~~~~~~~

The ``find_one()`` method takes a query filter as a parameter. The
method returns *the first document* that matches the filter criteria as
either a ``Some`` type or a ``None`` type, if no document is matched.

.. _rust-retrieve-options:

Modify Behavior
~~~~~~~~~~~~~~~

You can modify the behavior of ``find()`` and ``find_one()`` by passing
a ``FindOptions`` or ``FindOneOptions`` type to the matching method.
If you don't specify any options, the driver uses the default values for
each setting.

The following table describes commonly used settings that you can specify in
``FindOptions`` and ``FindOneOptions``:

.. list-table::
   :widths: 30 70
   :header-rows: 1

   * - Setting
     - Description

   * - ``collation`` 
     - | The type of language collation to use when sorting results.  
       | Default: ``nil``

   * - ``hint`` 
     - | The index to use for the operation.  
       | Default: ``nil``

   * - ``projection`` 
     - | The projection to use when returning results.  
       | Default: ``nil``

   * - ``read_concern`` 
     - | The read concern to use for the find operation. If you don't
         set a read concern, the operation inherits the one set for the
         collection. To learn more about read concerns, see
         :manual:`Read Concern </reference/read-concern/>`
         in the Server manual.

   * - ``skip`` 
     - | The number of documents to skip when returning results.  
       | Default: ``nil``

   * - ``sort`` 
     - | The sort to use when returning results.  
       | Default: ``nil``

For a full list of settings you can specify for each type, see the :ref:`API
documentation <rust-crud-retrieve-api>` for ``FindOptions`` and
``FindOneOptions``.

Examples
~~~~~~~~

find() Example
``````````````

The following example passes a filter and ``FindOptions`` to
the ``find()`` method to perform the following actions:

- Matches documents where the value of ``last_ordered`` is before 2018
  and the value of ``quantity`` is below ``100``
- Sorts matched documents in descending order by ``quantity``

.. io-code-block::

   .. input:: /includes/fundamentals/code-snippets/crud/retrieve.rs
      :start-after: begin-find-many
      :end-before: end-find-many
      :language: rust
      :dedent:

   .. output::
      :language: console
      :visible: false

      * { "_id": ObjectId("..."), "item": "watering can", "quantity": 19, "last_ordered": DateTime("2017-11-01 ...") }
      * { "_id": ObjectId("..."), "item": "basket", "quantity": 56, "last_ordered": DateTime("2017-03-15 ...") }

find_one() Example
``````````````````

The following example passes a filter and ``FindOneOptions`` to
the ``find_one()`` method to perform the following actions:

- Matches documents where the value of ``quantity`` is at least ``20``
- Skips the first two matched documents

.. io-code-block::

   .. input:: /includes/fundamentals/code-snippets/crud/retrieve.rs
      :start-after: begin-find-one
      :end-before: end-find-one
      :language: rust
      :dedent:

   .. output::
      :language: console
      :visible: false

      * { "_id": ObjectId("..."), "item": "placemat", "quantity": 80, "last_ordered": DateTime("2018-07-15 ...") }

.. _rust-retrieve-aggregation:

Aggregation Operations
----------------------

Use **aggregation operations** to retrieve and transform data from your
collections. You can perform aggregation operations by using the ``aggregate()``
method.

Aggregation
~~~~~~~~~~~

The ``aggregate()`` method takes an **aggregation pipeline** as a
parameter. An aggregation pipeline includes one or more **stages** that
specify how to transform data.

.. TODO To learn more about aggregation, see the
.. :ref:`Aggregation <rust-aggregation>` guide.

The method returns the resulting documents in a ``Cursor`` type. If
your aggregation pipeline does not contain a :manual:`$match
</reference/operator/aggregation/match/>` stage, the pipeline processes
all of the documents in the collection.

.. TODO To learn how to access data from a cursor, see :ref:`rust-cursor-guide`.

Modify Behavior
~~~~~~~~~~~~~~~

You can modify the behavior of ``aggregate()`` by passing
an ``AggregateOptions`` type as an optional parameter.
If you don't specify any options, the driver uses the default values for
each setting.

The following table describes commonly used settings that you can specify in
``AggregateOptions``:

.. list-table::
   :widths: 30 70
   :header-rows: 1

   * - Setting
     - Description

   * - ``allow_disk_use`` 
     - | Enables writing to temporary files. If ``true``,
         aggregation stages can write data to the ``_tmp`` subdirectory in the
         ``dbPath`` directory.

       | Default: ``false``

   * - ``batch_size`` 
     - The number of documents the server should return in each cursor batch.

   * - ``collation``
     - | The type of language collation to use when sorting results.  
       | Default: ``nil``

   * - ``hint`` 
     - | The index to use for the operation.  
       | Default: ``nil``

   * - ``read_concern`` 
     - | The read concern to use for the find operation. If you don't
         set a read concern, the operation inherits the one set for the
         collection. To learn more about read concerns, see
         :manual:`Read Concern </reference/read-concern/>`
         in the Server manual.

   * - ``write_concern`` 
     - | The write concern to use for the find operation. If you don't
         set a write concern, the operation inherits the one set for the
         collection. To learn more about write concerns, see
         :manual:`Write Concern </reference/write-concern/>`
         in the Server manual.

For a full list of settings, see the :ref:`API
documentation <rust-crud-retrieve-api>` for ``AggregateOptions``.

Example
~~~~~~~

The following example passes an aggregation pipeline to
the ``aggregate()`` method to perform the following actions:

- Extracts the year from the ``last_ordered`` field into the
  ``year_last_ordered`` field
- Groups documents by the ``year_last_ordered`` field and calculates the
  sum of the ``quantity`` fields for each year
- Sets an ascending sort on the ``year_last_ordered`` field

.. io-code-block::

   .. input:: /includes/fundamentals/code-snippets/crud/retrieve.rs
      :start-after: begin-agg
      :end-before: end-agg
      :language: rust
      :dedent:

   .. output::
      :language: console
      :visible: false

      * { "_id": { "year_last_ordered": 2018 }, "remaining_qty": 181 }
      * { "_id": { "year_last_ordered": 2017 }, "remaining_qty": 75 }
      * { "_id": { "year_last_ordered": 2016 }, "remaining_qty": 214 }

Additional Information
----------------------

.. TODO For runnable examples of the find operations, see the following usage
.. examples:
.. 
.. - :ref:`rust-find-one`
.. - :ref:`rust-find-multiple`

.. TODO To learn more about the operations mentioned, see the following
.. guides:
.. 
.. - :ref:`rust-query-guide`
.. - :ref:`rust-cursor-guide`
.. - :ref:`rust-skip-guide`
.. - :ref:`rust-sort-guide`
.. - :ref:`rust-limit-guide`
.. - :ref:`rust-project-guide`
.. - :ref:`rust-aggregation-guide`
.. - :ref:`rust-collations-guide`

.. _rust-crud-retrieve-api:

API Documentation
~~~~~~~~~~~~~~~~~

To learn more about any of the methods or types discussed in this
guide, see the following API Documentation:

- `find_one() <{+api+}/struct.Collection.html#method.find_one>`__
- `Option <https://doc.rust-lang.org/nightly/core/option/enum.Option.html>`__
- `find() <{+api+}/struct.Collection.html#method.find>`__
- `FindOptions <{+api+}/options/struct.FindOptions.html>`__
- `FindOneOptions <{+api+}/options/struct.FindOneOptions.html>`__
- `Cursor <{+api+}/struct.Cursor.html>`__
- `aggregate() <{+api+}/struct.Collection.html#method.aggregate>`__
- `AggregateOptions <{+api+}/options/struct.AggregateOptions.html>`__