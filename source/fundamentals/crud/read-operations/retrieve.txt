.. _rust-retrieve-guide:

==============
Retrieve Data
==============

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

In this guide, you can learn how to retrieve data from your MongoDB
collections using **read operations**.

Read operations allow you to perform the following actions:

- Retrieve documents from your collections by using :ref:`find
  operations <rust-retrieve-find>`
- Transform documents in your collections by using
  :ref:`aggregation operations <rust-retrieve-aggregation>`

Sample Data
~~~~~~~~~~~

.. TODO decide on structs in crud

To run the examples in this guide, load the sample data into a
collection called ``db.inventory`` with the following code:

.. literalinclude:: /includes/fundamentals/code-snippets/crud/retrieve.rs
   :language: rust
   :dedent:
   :start-after: begin-insert
   :end-before: end-insert

.. include:: /includes/fundamentals/automatic-creation.rst

Each document represents an item in a store's inventory and contains
information about its quantity and the last time a restock was ordered.

.. _rust-retrieve-find:

Find Operations
---------------

Use **find operations** to retrieve data from MongoDB. Find operations
consist of the ``find()`` and ``find_one()`` methods.

Find All Matching Documents
~~~~~~~~~~~~~~~~~~~~~~~~~~~

The ``find()`` method takes a query filter as a parameter. The method
returns *all* documents that match the filter criteria in a ``Cursor``
type.

.. TODO To learn how to access data from a cursor, see :ref:`rust-cursor-guide`.

Find One Document
~~~~~~~~~~~~~~~~~

The ``find_one()`` method takes a query filter as a parameter. The
method returns *the first document* that matches the filter criteria as
either a ``Some`` type or a ``None`` type, if no document is matched.

.. _rust-retrieve-options:

Modify Behavior
~~~~~~~~~~~~~~~

You can modify the behavior of ``find()`` and ``find_one()`` by passing
in a ``FindOptions`` or ``FindOneOptions`` type to the matching method.
If you don't specify any options, the driver uses the default values for
each setting.

The following table describes commonly used options that you can set in
``FindOptions`` and ``FindOneOptions``:

.. list-table::
   :widths: 30 70
   :header-rows: 1

   * - Setting
     - Description

   * - ``collation`` 
     - | The type of language collation to use when sorting results.  
       | Default: ``nil``

   * - ``hint`` 
     - | The index to use for the operation.  
       | Default: ``nil``

   * - ``projection`` 
     - | The projection to use when returning results.  
       | Default: ``nil``

   * - ``read_concern`` 
     - | The read concern to use for the find operation. If no read
         concern is set, the operation inherits the one set for the
         collection. To learn more about read concerns, see
         :manual:`Read Concern </reference/read-concern/>`
         in the Server manual.

   * - ``skip`` 
     - | The number of documents to skip when returning results.  
       | Default: ``nil``

   * - ``sort`` 
     - | The sort to use when returning results.  
       | Default: ``nil``

For a full list of settings you can specify for each type, see the :ref:`API
documentation <rust-crud-retrieve-api>`.

Examples
~~~~~~~~

The following example passes a context, filter, and ``FindOptions`` to
the ``Find()`` method, which performs the following actions:

- Matches documents where the ``rating`` value is between ``5`` and
  ``9`` (exclusive)
- Sorts matched documents in ascending order by ``date_ordered``

.. io-code-block::
   :copyable: true

   .. input::
      :language: go

      filter := bson.D{
          {"$and",
              bson.A{
                  bson.D{{"rating", bson.D{{"$gt", 5}}}},
                  bson.D{{"rating", bson.D{{"$lt", 9}}}},
              }},
      }
      sort := bson.D{{"date_ordered", 1}}
      opts := options.Find().SetSort(sort)
      
      cursor, err := coll.Find(context.TODO(), filter, opts)
      if err != nil {
          panic(err)
      }
      
      var results []Review
      if err = cursor.All(context.TODO(), &results); err != nil {
          panic(err)
      }
      for _, result := range results {
          res, _ := json.Marshal(result)
          fmt.Println(string(res))
      }

   .. output::
      :language: none
      :visible: false

      {"Item":"Sencha","Rating":7,"DateOrdered":"2009-11-18T05:00:00Z"}
      {"Item":"Masala","Rating":8,"DateOrdered":"2009-12-01T05:00:00Z"}

Find One Example
````````````````

The following example passes a context, filter, and ``FindOneOptions``
to the ``FindOne()`` method, which performs the following actions:

- Matches documents where the ``date_ordered`` value is on or before November
  30, 2009
- Skips the first two matched documents

.. io-code-block::
   :copyable: true

   .. input::
      :language: go

      filter := bson.D{{"date_ordered", bson.D{{"$lte", time.Date(2009, 11, 30, 0, 0, 0, 0, time.Local)}}}}
      opts := options.FindOne().SetSkip(2)
      
      var result Review
      err := coll.FindOne(context.TODO(), filter, opts).Decode(&result)
      if err != nil {
          panic(err)
      }
      
      res, _ := json.Marshal(result)
      fmt.Println(string(res))

   .. output::
      :language: none
      :visible: false

      {"Item":"Masala","Rating":9,"DateOrdered":"2009-11-12T05:00:00Z"}

.. _golang-retrieve-aggregation:

Aggregation Operations
----------------------

Use **aggregation operations** to retrieve and transform data from
MongoDB. Perform aggregation operations using the ``Aggregate()``
method.

Aggregation
~~~~~~~~~~~

The ``Aggregate()`` method expects you to pass a ``Context`` type and
an **aggregation pipeline**. An aggregation pipeline defines how to
transform data through stages. Some of the stages are matching
documents, renaming fields, and grouping values.

The method returns the resulting documents in a ``Cursor`` type. If
you omit the :manual:`$match </reference/operator/aggregation/match/#mongodb-pipeline-pipe.-match>`
stage, the pipeline proceeds using all documents in the collection.

To learn how to access data in a cursor, see :ref:`golang-cursor`.

Modify Behavior
~~~~~~~~~~~~~~~

The ``Aggregate()`` method optionally takes an ``AggregateOptions``
type, which represents options you can use to modify its behavior. If
you don't specify any options, the driver uses the default values for
each option.

The ``AggregateOptions`` type allows you to configure options with the
following methods:

.. list-table::
   :widths: 30 70
   :header-rows: 1

   * - Method
     - Description

   * - ``SetAllowDiskUse()`` 
     - | Whether to write to temporary files.
       | Default: ``false``

   * - ``SetBatchSize()`` 
     - | The number of documents to return in each batch.  
       | Default: none

   * - ``SetBypassDocumentValidation()`` 
     - | Whether to allow the write to opt-out of document level validation.
       | Default: ``false``

   * - ``SetCollation()`` 
     - | The type of language collation to use when sorting results.  
       | Default: ``nil``

   * - ``SetMaxTime()`` 
     - | The maximum amount of time that the query can run on the server.
       | Default: ``nil``

   * - ``SetMaxAwaitTime()`` 
     - | The maximum amount of time for the server to wait on new documents to satisfy a tailable cursor query.
       | Default: ``nil``

   * - ``SetComment()`` 
     - | An arbitrary string to help trace the operation through the database profiler, currentOp and logs.
       | Default: ``""``

   * - ``SetHint()`` 
     - | The index to use to scan for documents to retrieve.
       | Default: ``nil``

   * - ``SetLet()`` 
     - | Specifies parameters for the aggregate expression, which improves command readability by separating the variables from the query text.
       | Default: none

Example
```````

The following example passes a context and an aggregation pipeline that
performs the following actions:

- Groups reviews by item ordered
- Calculates the average rating for each item

.. io-code-block::
   :copyable: true

   .. input::
      :language: go

      groupStage := bson.D{
         {"$group", bson.D{
            {"_id", "$item"},
            {"average", bson.D{
               {"$avg", "$rating"},
            }},
      }}}

      cursor, err := coll.Aggregate(context.TODO(), mongo.Pipeline{groupStage})
      if err != nil {
         panic(err)
      }

      var results []bson.M
      if err = cursor.All(context.TODO(), &results); err != nil {
         panic(err)
      }
      for _, result := range results {
         fmt.Printf("%v had an average rating of %v \n", result["_id"], result["average"])
      }

   .. output::
      :language: none
      :visible: false

      Sencha had an average rating of 8.5 
      Hibiscus had an average rating of 4 
      Masala had an average rating of 9

To learn more about how to construct an aggregation pipeline, see
the MongoDB server manual page on :manual:`Aggregation
</core/aggregation-pipeline/>`.

Additional Information
----------------------

For runnable examples of the find operations, see the following usage
examples:

- :ref:`golang-find-one`
- :ref:`golang-find-multiple`

To learn more about the operations mentioned, see the following
guides:

- :ref:`golang-query-document`
- :ref:`golang-cursor`
- :ref:`golang-skip`
- :ref:`golang-sort-results`
- :ref:`golang-limit`
- :ref:`golang-project`
- :ref:`golang-aggregation`
- :ref:`golang-collations`

.. _rust-crud-retrieve-api:

API Documentation
~~~~~~~~~~~~~~~~~

To learn more about any of the methods or types discussed in this
guide, see the following API Documentation:

- `FindOne() <{+api+}/mongo#Collection.FindOne>`__
- `SingleResult <{+api+}/mongo#SingleResult>`__
- `Find() <{+api+}/mongo#Collection.Find>`__
- `FindOptions <{+api+}/mongo/options#FindOptions>`__
- `FindOneOptions <{+api+}/mongo/options#FindOneOptions>`__
- `Cursor <{+api+}/mongo#Cursor>`__
- `Aggregate() <{+api+}/mongo#Collection.Aggregate>`__
- `AggregateOptions <{+api+}/mongo/options#AggregateOptions>`__