.. _rust-cursor-guide:

=============================
Access Data by Using a Cursor
=============================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

In this guide, you can learn how to use the {+driver-short+} to access
data from a collection by using a **cursor**. A cursor is a mechanism
that allows you to iterate through multiple documents while
holding only a subset of them in memory at a given time. The driver
implements the ``Cursor`` type to provide cursor functionality.
For example, when you execute a find operation that returns multiple
documents, the driver returns a ``Cursor`` type that references the
matched documents.

When the driver returns a ``Cursor`` instance, it contains the first batch
of results from the operation, and then the server returns more
individual results as you iterate through the cursor. If there are more
results after you exhaust the batch of results, the ``Cursor`` instance
will fetch the next batch of documents until all of the results are returned.

This guide includes the following sections:

- :ref:`Retrieve Documents Individually <rust-cursor-individual>`:
  describes how to access results one at a time by using a cursor

- :ref:`Retrieve Documents as an Array <rust-cursor-array>`:
  describes how to access results all at once by converting the cursor
  to an array

- :ref:`Modify Cursor Attributes <rust-cursor-options>`: describes how
  to configure the cursor that a method returns

- :ref:`Additional Information <rust-cursor-addtl-info>`:
  provides links to additional resources and API documentation for types
  and methods mentioned in this guide

.. _rust-cursor-individual:

Retrieve Documents Individually
-------------------------------

The driver provides the following code patterns to iterate through
documents returned by a ``Cursor`` instance:

- :ref:`Built-in Pattern <rust-cursor-indiv-builtin>`: use the ``advance()`` method to
  move the cursor forward, and then retrieve and deserialize the
  current document by using the ``deserialize_current()`` method
- :ref:`Stream Implementation Pattern <rust-cursor-indiv-stream>`: iterate over the cursor by
  using the ``next()`` or ``try_next()`` methods.

The following sections describe these code patterns and corresponding
methods in more detail.

.. _rust-cursor-indiv-builtin:

Built-in Pattern
~~~~~~~~~~~~~~~~

The ``Cursor`` type includes the ``advance()`` and
``deserialize_current()`` methods to iterate through a cursor and
retrieve documents individually.

The ``advance()`` method moves the cursor forward and sends a request to the
database for more results when the local buffer is exhausted. This
occurs until either the cursor is exhausted or the cursor receives the
next batch. The ``advance()`` method returns a ``true`` result if new
results are successfully returned and a ``false`` result if the cursor
is closed.

The ``deserialize_current()`` method returns a reference to the current
result in the cursor and deserializes the result into the type
associated with the cursor. Unless you change this type, it is the same
type that your collection is parameterized with.

.. important::
   
   You can only invoke the ``deserialize_current()`` method if the ``advance()`` method
   returns a ``true`` result. The driver throws an error if you call
   ``deserialize_current()`` on the cursor without a ``true`` result or
   without calling previously calling ``advance()``.

The following example shows how to implement this code pattern to
iterate through the results of a find operation on the ``fruits``
collection:

.. io-code-block::
   :copyable: true

   .. input:: /includes/fundamentals/code-snippets/crud/cursor.rs
      :start-after: start-indiv-builtin
      :end-before: end-indiv-builtin
      :language: rust
      :dedent:

   .. output::
      :language: console
      :visible: false

      Document({"_id": ObjectId("..."), "name": String("strawberry"), "color": String("red")})
      Document({"_id": ObjectId("..."), "name": String("pomegranate"), "color": String("red")})

.. _rust-cursor-indiv-stream:

Stream Implementation Pattern
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The ``Cursor`` type implements the ``Stream`` trait, so you can iterate
through the cursor as a stream. You might find this code pattern to be
more ergonomic for many use cases than the pattern that uses the built-in
``Cursor`` methods.

You can use the following methods to use the stream pattern:

- ``next()``: moves to the next item in the cursor and returns
  an ``Option<Result<T>>`` type
- ``try_next``: moves to the next item in the cursor and returns
  a ``Result<Option<T>>`` type, which makes it easier to use with the
  ``?`` operator

.. note::

   To use the ``next()`` method, you must import the ``StreamExt``
   trait. To use the ``try_next()`` method, you must import the
   ``TryStreamExt`` trait.

The following example shows how to implement the two stream methods to
iterate through the results of find operations on the ``fruits``
collection:

.. io-code-block::
   :copyable: true

   .. input:: /includes/fundamentals/code-snippets/crud/cursor.rs
      :start-after: start-indiv-stream
      :end-before: end-indiv-stream
      :language: rust
      :dedent:

   .. output::
      :language: console
      :visible: false

      Output from next() iteration:
      { "_id": ObjectId("..."), "name": "strawberry", "color": "red" }
      { "_id": ObjectId("..."), "name": "pomegranate", "color": "red" }
      
      Output from try_next() iteration:
      { "_id": ObjectId("..."), "name": "banana", "color": "yellow" }
      { "_id": ObjectId("..."), "name": "pineapple", "color": "yellow" }

.. _rust-cursor-array:

Retrieve Documents as an Array
------------------------------

Because the ``Cursor`` type implements the ``Stream`` trait, you can
collect the results from a cursor into an array.

You can use the following methods to retrieve documents as an array:

- ``collect()``: collects results from a cursor into a
  ``Vec<Result<T>>`` type
- ``try_collect()``: collects results from a cursor into a
  ``Result<Vec<T>>`` type, which makes it easier to use with the
  ``?`` operator

.. note::

   To use the ``collect()`` method, you must import the ``StreamExt``
   trait. To use the ``try_collect()`` method, you must import the
   ``TryStreamExt`` trait.

.. io-code-block::
   :copyable: true

   .. input:: /includes/fundamentals/code-snippets/crud/cursor.rs
      :start-after: start-array
      :end-before: end-array
      :language: rust
      :dedent:

   .. output::
      :language: console
      :visible: false

      Output from collect():
      [Ok(Document({"_id": ObjectId("..."), "name": String("strawberry"), "color": String("red")})), Ok(Document({"_id": ObjectId("..."), "name": String("pomegranate"), "color": String("red")}))]
      
      Output from try_collect():
      [Document({"_id": ObjectId("..."), "name": String("banana"), "color": String("yellow")}), Document({"_id": ObjectId("..."), "name": String("pineapple"), "color": String("yellow")})]

.. important:: Large Query Results

   Your application might crash if the number and size of documents
   returned by your query exceeds available application memory. If you expect
   a large result set, you should retrieve documents from the cursor
   individually, instead of collecting them into a cursor. To learn how
   to iterate through the cursor, see the :ref:`Retrieve Documents Individually <rust-cursor-individual>` section of this guide.

.. _rust-cursor-options:

Modify Cursor Attributes
------------------------

To modify the cursor that an operation returns, pass options to
the method that returns the ``Cursor`` instance. For example, you can
specify cursor-related options in a ``FindOptions`` type that you pass to the
``find()`` method.

The following table describes cursor-related options that you can set in
an options instance:

.. list-table::
   :widths: 30 70
   :header-rows: 1

   * - Setting
     - Description

   * - ``batch_size`` 
     - | Specifies the number of documents the server should return per
         cursor batch. This option affects only the number of documents
         kept in memory at a given time, not the number of documents
         returned by a cursor.

       | Type: ``u32``

   * - ``cursor_type`` 
     - | Specifies the type of cursor to return. You can set this option
         to produce a tailable cursor. To learn more about tailable
         cursors, see :manual:`Tailable Cursors
         </core/tailable-cursors/>` in the Server manual.

       | Type: ``CursorType``
       | Default: ``CursorType::NonTailable``

   * - ``no_cursor_timeout`` 
     - | Specifies whether the server should close the cursor after a
         period of inactivity.

       .. important::
          
          Because the ``Cursor`` type implements the ``Drop`` trait, the
          server will by default close a cursor when it goes out of
          scope. The server executes an asynchronous ``killCursors``
          command to close the cursor. See :manual:`killCursors
          </reference/command/killCursors/>` in the Server manual to learn more.

       | Type: ``bool``
       | Default: ``false``

The following code shows how to construct a ``FindOptions``
instance and specify cursor-related settings:

.. literalinclude:: /includes/fundamentals/code-snippets/crud/cursor.rs
   :start-after: start-options
   :end-before: end-options
   :language: rust
   :copyable:
   :dedent:

.. _rust-cursor-addtl-info:

Additional Information
----------------------

To learn more about the operations discussed in this guide, see the
following guides:

- :ref:`rust-retrieve-guide`
- :ref:`rust-query-guide`

.. TODO link to serialization guide

API Documentation
~~~~~~~~~~~~~~~~~

To learn more about the methods and types discussed in this
guide, see the following API Documentation:

- `Cursor <{+api+}/struct.Cursor.html>`__
- `advance() <{+api+}/struct.Cursor.html#method.advance>`__
- `deserialize_current() <{+api+}/struct.Cursor.html#method.deserialize_current>`__
- `next() <https://docs.rs/futures/latest/futures/stream/trait.StreamExt.html#method.next>`__ in the
  ``StreamExt`` API documentation
- `try_next() <https://docs.rs/futures/latest/futures/stream/trait.TryStreamExt.html#method.try_next>`__ in the
  ``TryStreamExt`` API documentation
- `collect() <https://docs.rs/futures/latest/futures/stream/trait.StreamExt.html#method.collect>`__ in the
  ``StreamExt`` API documentation
- `try_collect() <https://docs.rs/futures/latest/futures/stream/trait.TryStreamExt.html#method.try_collect>`__ in the
  ``TryStreamExt`` API documentation
- `find() <{+api+}/struct.Collection.html#method.find>`__
- `FindOptions <{+api+}/options/struct.FindOptions.html>`__