.. _rust-cursor-guide:

=========================
Access Data From a Cursor
=========================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

In this guide, you can learn how to access data with a **cursor**.

A cursor is a mechanism that allows an application to iterate over
database results while holding only a subset of them in memory at a
given time. Read operations that match multiple documents use a cursor
to return those documents in batches as opposed to all at once.

.. tip::

   Batch size of the cursor can be configured using the options of the
   method that returns it. For example, setting the batch_size field of
   ``FindOptions`` will set the batch size of the cursor returned by
   ``Collection::find``. For more information, see `Cursor
   <{+api+}/struct.Cursor.html>`__ in the API documentation.

Sample Cursor
~~~~~~~~~~~~~

Each section uses the following ``cursor`` variable, which is a
``Cursor`` struct that contains all the documents in a collection:

.. literalinclude:: /includes/fundamentals/code-snippets/crud/cursor.rs
   :language: rust
   :dedent:
   :start-after: begin cursor def
   :end-before: end cursor def

.. tip::

   For more information of the ``find()`` method, see
   :ref:`rust-retrieve-guide`.


.. _rust-individual-documents:

Retrieve Documents Individually
-------------------------------

To retrieve documents from your cursor individually, use the
``next()`` method.

The method returns a document if all of the following conditions are met:

- A document is currently or will later be available.
- The driver didn't throw any errors.
- The context didn't expire.

.. literalinclude:: /includes/fundamentals/code-snippets/crud/cursor.rs
   :language: rust
   :dedent:
   :start-after: begin-cursor-next
   :end-before: end-cursor-next

Tailable Cursor
~~~~~~~~~~~~~~~

To attempt retrieving a document from a :manual:`tailable cursor
</core/tailable-cursors/>`, use the ``try_next()`` method.

The method returns a document if all of the following conditions are met:

- A document is currently available.
- The driver didn't throw any errors.
- The context didn't expire.

.. literalinclude:: /includes/fundamentals/code-snippets/crud/cursor.rs
   :language: rust
   :dedent:
   :start-after: begin try next
   :end-before: end try next

.. _rust-all-documents:

Retrieve All Documents
----------------------

To populate an array with all of your query results, use the ``collect()``
method:

.. literalinclude:: /includes/fundamentals/code-snippets/crud/cursor.rs
   :language: rust
   :dedent:
   :start-after: begin cursor collect
   :end-before: end cursor collect

Tailable Cursor
~~~~~~~~~~~~~~~
To attempt to populate an array with all of your query results from a :manual:`tailable cursor
</core/tailable-cursors/>`, use the ``try_collect()`` method:

.. literalinclude:: /includes/fundamentals/code-snippets/crud/cursor.rs
   :language: rust
   :dedent:
   :start-after: begin try collect
   :end-before: end try collect

Additional Information
----------------------

To learn more about the operations discussed in this guide, see the
following guides:

- :ref:`rust-retrieve-guide`
- :ref:`rust-query-guide`
- :manual:`Tailable Cursors </core/tailable-cursors/>`

.. TODO - Fundamentals > BSON page

API Documentation
~~~~~~~~~~~~~~~~~

To learn more about cursors and how to access their elements, see
the following API Documentation:

- `Cursor <{+api+}/struct.Cursor.html>`__
- `Cursor.next() <https://docs.rs/futures/latest/futures/stream/trait.StreamExt.html#method.next>`__
- `Cursor.try_next() <https://docs.rs/futures/latest/futures/stream/trait.TryStreamExt.html#method.try_next>`__
- `Cursor.collect() <https://docs.rs/futures/latest/futures/stream/trait.StreamExt.html#method.collect>`__
- `Cursor.try_collect() <https://docs.rs/futures/latest/futures/stream/trait.TryStreamExt.html#method.try_collect>`__
- `Cursor.deserialize_current() <{+api+}/struct.Cursor.html#method.deserialize_current>`__