.. _rust-serialization:

===============================
Data Modeling and Serialization
===============================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

In this guide, you can learn about how the {+driver-short+} handles conversions
between BSON and Rust types. The process of converting a Rust type to
BSON is called **serialization**, while the reverse process is called
**deserialization**.

The Rust language uses a static type system, but BSON has a dynamic
schema. To handle conversions between Rust types and BSON, the driver and the
``bson`` library integrate functionality from the ``serde`` crate. By
implementing ``serde`` traits in your application, you can use
custom Rust types, such as structs and enums, to model your data.

Generic Type Parameter
----------------------

When you create a ``Collection`` instance, you must specify a generic
type parameter to represent the type of data that models the documents
in your collection. To learn more about specifying a generic parameter,
see the :ref:`Collection Parameterization section
<rust-coll-parameterization>` of the guide on Databases and Collections.

We recommend that you define and use a custom type to model your
collection's data, instead of the ``Document`` type.

Custom Data Model
-----------------

You can use any Rust data type that implements the ``Serialize`` and
``Deserialize`` traits from the ``serde`` crate as the generic parameter for a
``Collection`` instance. To implement these traits, you must use the
following ``derive`` statement before defining a Rust type:

.. code-block:: rust
   
   #[derive(Serialize, Deserialize)]

Custom Struct Example
~~~~~~~~~~~~~~~~~~~~~

The following code defines a sample ``Vegetable`` struct that derives the
serialization traits:

.. literalinclude:: /includes/fundamentals/code-snippets/serialization.rs
   :language: rust
   :dedent:
   :start-after: begin-veg-struct
   :end-before: end-veg-struct

The following code accesses the ``vegetables`` collection with
``Vegetable`` as its generic parameter:

.. literalinclude:: /includes/fundamentals/code-snippets/serialization.rs
   :language: rust
   :dedent:
   :start-after: begin-access-coll
   :end-before: end-access-coll

Because the ``Collection`` instance is parameterized with the
``Vegetable`` struct, you can perform CRUD operations with this type.
The following code inserts a ``Vegetable`` into the collection:

.. literalinclude:: /includes/fundamentals/code-snippets/serialization.rs
   :language: rust
   :dedent:
   :start-after: begin-insert-veg
   :end-before: end-insert-veg

Multiple Parameterizations
~~~~~~~~~~~~~~~~~~~~~~~~~~

If your collection contains multiple schemas, you can define a custom
type to model each data type and create clones of a ``Collection``
instance that are parameterized each type. You can create clones of a
``Collection`` instance by using the ``clone_with_type()`` method.

Suppose you originally parameterized a collection with a sample struct
called ``Square``, but you later realize that you want to insert a different
type of data, modeled by the ``Circle`` struct, into the collection.
The following code parameterizes a collection with the ``Square`` type,
then creates a clone of the collection that is parameterized with the
``Circle`` type:

.. literalinclude:: /includes/fundamentals/code-snippets/serialization.rs
   :language: rust
   :dedent:
   :start-after: begin-multiple-types
   :end-before: end-multiple-types

Custom Serialization
--------------------

You can modify the default serialization and deserialization behavior of
the {+driver-short+} by using **attributes** from the ``serde`` crate.
Attributes are an optional pieces of metadata attached to fields of
structs or variants of enums.

The ``serde`` crate provides the ``serialize_with`` and
``deserialize_with`` attributes to select helper functions to customize
serialization and deserialization on specific fields and variants. To
specify an attribute on a struct field or enum variant, include it
before the definition:

.. code-block:: rust
   
   #[derive(Serialize, Deserialize)]
   struct MyStruct {
       #[serde(serialize_with = "<helper function>")]
       field1: String,
       // ... other fields
   }

In the following sections, you can find examples that use helper
functions from the ``bson`` library to achieve common serialization tasks. To
see a full list of these helper functions, see the `serde_helpers API
documentation <https://docs.rs/bson/latest/bson/serde_helpers/index.html>`__.

Serialize a String as an ObjectId
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You might want to represent the ``_id`` field in a document as a
hexadecimal string in your struct. To convert the hexadecimal string to
the ``ObjectId`` BSON type, use the
``serialize_hex_string_as_object_id`` helper function as the value of
the ``serialize_with`` attribute attached to the ``_id`` field:

.. literalinclude:: /includes/fundamentals/code-snippets/serialization.rs
   :language: rust
   :dedent:
   :start-after: begin-hex-to-objectid
   :end-before: end-hex-to-objectid

Select from the :guilabel:`Struct` and :guilabel:`BSON` tabs below
to see how the driver serializes a sample ``Order`` struct to BSON:

.. tabs::

   .. tab:: Struct
      :tabid: order struct

      .. code-block:: rust
         
         let order = Order {
             _id: "6348acd2e1a47ca32e79f46f".to_string(),
             item: "jasmine rice".to_string(),
         };

   .. tab:: BSON
      :tabid: serialized bson

      .. code-block:: json

         {
           "_id": { "$oid": "6348acd2e1a47ca32e79f46f" },
           "item": "jasmine rice"
         }

Serialize a DateTime as an ISO-Formatted String
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You might want to represent a ``DateTime`` field value in a document as
an ISO-formatted string in BSON. To specify this conversion, use the
``serialize_bson_datetime_as_rfc3339_string`` helper function as the value of
the ``serialize_with`` attribute attached to the field. In the following
example, the ``delivery_date`` field has a value of type ``DateTime``:

.. literalinclude:: /includes/fundamentals/code-snippets/serialization.rs
   :language: rust
   :dedent:
   :start-after: begin-dt-to-string
   :end-before: end-dt-to-string

Select from the :guilabel:`Struct` and :guilabel:`BSON` tabs below
to see how the driver serializes a sample ``Order`` struct to BSON:

.. tabs::

   .. tab:: Struct
      :tabid: order struct

      .. code-block:: rust
         
         let order = Order {
             item: "jasmine rice".to_string(),
             delivery_date: DateTime::now(),
         };

   .. tab:: BSON
      :tabid: serialized bson

      .. code-block:: json

         {
           "_id": { ... },
           "item": "jasmine rice",
           "delivery_date": "2023-09-26T17:30:18.181Z"
         }

Serialize a u32 as an f64
~~~~~~~~~~~~~~~~~~~~~~~~~

serialize_u32_as_f64

You might want to represent a ``u32`` field value in a document as
an ``f64``, or ``Double``, type in BSON. To specify this conversion, use the
``serialize_u32_as_f64`` helper function as the value of
the ``serialize_with`` attribute attached to the field. In the following
example, the ``quantity`` field has a value of type ``u32``:

.. literalinclude:: /includes/fundamentals/code-snippets/serialization.rs
   :language: rust
   :dedent:
   :start-after: begin-u32-f64
   :end-before: end-u32-f64

.. note::
   
   The BSON ``Double`` representation of a ``u32`` Rust value appears
   the same as the original value.