.. _rust-async-sync:

=====================================
Asynchronous and Synchronous Runtimes
=====================================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

In this guide, you can learn about the {+driver-short+}'s asynchronous and synchronous runtimes.
This guide explains how to enable the available runtimes and structure your code to use each API.

{+driver-short+} supports both ``tokio`` and ``async-std``, the two most popular asynchronous runtime crates.
By default, the driver uses ``tokio``, but you can explicitly choose a runtime
by specifying one of ``tokio-runtime`` or ``async-std-runtime`` feature flags in your ``Cargo.toml``.

The driver also includes a synchronous API for simplicity, or when parallelism is not necessary.

.. _rust-async-sync-configure-async:

Configure the Asynchronous Runtime
----------------------------------

The driver uses the ``tokio`` runtime by default.
You can explicitly choose a runtime by specifying either the ``tokio-runtime`` or ``async-std-runtime`` feature flag in your ``Cargo.toml``.

.. tabs::

   .. tab:: tokio
      :tabid: asynchronous-api-tokio

      To use ``tokio``, add the following to your ``Cargo.toml``:

      .. code-block:: toml

         [dependencies.mongodb]
         version = "2.6.0"
         default-features = false
         features = ["tokio-runtime"]

      Also install the crate by running:

      .. code-block:: none

         cargo add tokio

   .. tab:: async-std
      :tabid: asynchronous-api-async-std

      To use ``async-std``, add the following to your ``Cargo.toml``:

      .. code-block:: toml

         [dependencies.mongodb]
         version = "2.6.0"
         default-features = false
         features = ["async-std"]

      Also install the crate by running:

      .. code-block:: none

         cargo add async-std

For more information on installing both the driver and runtimes, see :ref:`rust-quick-start-download-and-install`.

Asynchronous Code Example (Tokio)
---------------------------------

Use the `Client() <{+api+}/struct.Client.html>`__ type for asynchronous programming.

The following code uses the ``task`` module from the ``tokio`` crate
to create separate, concurrent tasks for multiple data operations:

.. literalinclude:: /includes/fundamentals/code-snippets/async-sync-tokio.rs
   :language: rust
   :dedent:

.. _rust-async-sync-configure-sync:

Configure the Synchronous Runtime
---------------------------------

The driver also provides a blocking, synchronous API.
To enable this, add the ``sync`` or ``tokio-sync`` feature to your ``Cargo.toml``.

.. code-block:: toml

   [dependencies.mongodb]
   version = "2.6.0"
   default-features = false
   features = ["sync"]

Synchronous Code Example
------------------------

When using the synchronous runtime, you must use types from the ``mongodb::sync`` module to perform operations.
The synchronous API calls through to the asynchronous API internally,
so you can use ``sync`` types as you might use types from the asynchronous API.
The following code uses the ``sync`` module to insert data into a collection using the blocking API.
It uses the synchronous client type imported from the ``sync`` module on the first line.
When the ``insert_one`` method runs, the driver waits for each request to complete before continuing.

.. literalinclude:: /includes/fundamentals/code-snippets/async-sync-sync.rs
   :language: rust
   :dedent:

Use Both Asynchronous and Synchronous APIs
------------------------------------------

You can use both asynchronous and synchronous APIs in the same application
by using the following in your ``Cargo.toml`` file.

.. code-block:: toml

   [dependencies]
   futures = "0.3.28"
   tokio = {version = "1.32.0", features = ["full"]}

   [dependencies.mongodb]
   version = "2.6.1"
   features = ["tokio-sync"]

Additional Information
----------------------

For more information about the concepts in this guide, see the following pages:

- `Asynchronous Programming in Rust <https://rust-lang.github.io/async-book/>`__

  .. - :ref:`Performance Considerations <rust-performance>`

API Documentation
~~~~~~~~~~~~~~~~~

To learn more about the methods and types discussed in this
guide, see the following API Documentation:

- `Client <{+api+}/struct.Client.html>`__
- `sync <{+api+}/sync/index.html>`__
