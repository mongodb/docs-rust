.. _rust-faq:

===
FAQ
===

.. facet::
   :name: genre
   :values: reference

.. meta::
   :keywords: code example, connection error, question, help

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

On this page, you can find frequently asked questions and their corresponding answers.

.. tip::

   If you can't find an answer to your problem on this page, see the
   :ref:`rust-issues-and-help` page for next steps and more resources.

Why Am I Getting Errors While Connecting to MongoDB?
----------------------------------------------------

If you have trouble connecting to a MongoDB deployment, see the
:ref:`rust-connection-troubleshooting` guide for possible solutions.

.. _rust-faq-connection-pool:

How Does Connection Pooling Work in the Rust Driver?
----------------------------------------------------

Each server in your MongoDB topology has a corresponding ``Client`` instance,
which manages the server's connection pool. Connection pools open sockets on
demand to support concurrent operations in your multi-threaded application.

You can configure the following connection pool features:

- Maximum and minimum size, set by the ``max_pool_size`` and ``min_pool_size`` options
- Maximum number of connections that the pool creates in parallel, set by the ``max_connecting``
  option
- Maximum idle time, set by the ``max_idle_time`` option

For more information about connection pooling, see the :ref:`rust-performance-pool`
section of the Performance Considerations guide.

How Do I Fix the "Trait bounds were not satisfied" Error?
---------------------------------------------------------

Trait bounds allow methods to restrict which types they accept as parameters
and what functionality those types must implement. For example, if you define
a method that accepts a generic type parameter and prints its value, the parameter
must implement the ``Display`` trait for printing purposes. The following example
defines the ``printer`` method and specifies that the method's parameter must
implement ``Display``: 

.. code-block:: rust
   :copyable: true

   fn printer<T: Display>(t: T) {
      println!("{}", t);
   }

When calling a method on a data type, you might encounter an error stating that
the method exists for your specified data type but its trait bounds are not
satisfied. For example, the driver might raise the following error message when
you call the ``try_next()`` method on a ``Cursor`` instance:

.. code-block:: none
   :copyable: false

   error[E0599]: the method `try_next` exists for struct `mongodb::Cursor<T>`,
   but its trait bounds were not satisfied

The ``Cursor<T>`` type implements the ``Stream`` trait and has access to the
``TryStreamExt`` methods, including ``try_next()``. However, ``Cursor<T>`` only
implements ``Stream`` if the trait bounds for ``T`` are satisfied. Namely, ``T``
must implement the ``DeserializeOwned`` trait, as specified in the `Cursor
<{+api+}/struct.Cursor.html/>`__ API documentation.

To resolve the preceding error, identify the data type over which the cursor 
iterates and ensure that this data type implements the ``DeserializeOwned`` trait.
You can use a ``where`` clause to apply the required trait bounds.

For more information about trait bounds, see the following resources:

- :community-forum:`Cursor trait bounds question <t/rust-driver-help-writing-a-generic-find-method/168846>`
  in the Community Forums
- `Bounds <https://doc.rust-lang.org/rust-by-example/generics/bounds.html>`__ in the
  Rust language documentation
- `Where clauses <https://doc.rust-lang.org/rust-by-example/generics/where.html>`__
  in the Rust language documentation

How Do I Convert Between BSON and Rust Types?
---------------------------------------------

The {+driver-short+} and the BSON library use the Serde framework to perform
conversions between custom Rust types, like structs and enums, and BSON. You can
install the ``serde`` crate to access the functionality of the Serde framework.
For instructions on installing this crate, see `serde <https://crates.io/crates/serde>`__
at the ``crates.io`` crate registry.

After installing the ``serde`` crate, you can model the documents in a collection
by using a custom type instead of a BSON document. Add the following ``derive``
statement before your custom struct definition to allow for serialization, or conversion
to BSON, and deserialization, or conversion to the struct type:

.. code-block:: rust
   :copyable: true

   #[derive(Serialize, Deserialize)]

You can then instantiate a ``Collection`` instance with your custom struct type as its
generic type parameter.

For more information about converting between BSON and Rust types, see the
:ref:`rust-serialization` guide and the :website:`Structuring Data with Serde in Rust
</developer/languages/rust/serde-improvements/>` MongoDB Developer Center article.

How Do I Process Values Wrapped in ``Result`` and ``Option`` Enums?
-------------------------------------------------------------------

The Rust language provides the ``Result`` and ``Option`` enums as safeguards for
your application code. Many methods provided by the {+driver-short+} return values
wrapped in one of these two types. The ``Result`` enum has an ``Ok(T)`` and an ``Err(E)``
variant, and it wraps the return values of methods that can output either a valid or
an error result. The ``Option`` enum has a ``None`` and a ``Some(T)`` variant, and it
wraps the return values of methods that can output either no value or some value.

For example, when you use the ``insert_one()`` method to insert a document into a
collection, the insert operation might not succeed. For this reason, the method returns
a ``Result<InsertOneResult>`` type. You can use the ``?`` operator to instruct the driver
to either unwrap the ``InsertOneResult`` if it's valid or return an error if the operation
does not succeed. The following code demonstrates the syntax for using the ``?`` operator
while handling an insert operation result:

.. code-block:: rust
   :copyable: true

   let insert_one_result = my_coll.insert_one(doc, None).await?;

If the preceding insert operation runs successfully, the ``insert_one_result`` variable
has a value of type ``InsertOneResult``. If the operation is unsuccessful, the code
returns an error.

Alternatively, you can create custom logic for handling the ``InsertOneResult`` value
depending on whether ``insert_one()`` returns the value wrapped in the ``Ok`` or the ``Err``
variant.

For more information about the ``Result`` and ``Option`` enums, see the following
resources in the Rust language documentation:

- `Result <https://doc.rust-lang.org/nightly/core/result/index.html>`__
- `Option <https://doc.rust-lang.org/nightly/core/option/index.html>`__
- `? Operator <https://doc.rust-lang.org/rust-by-example/std/result/question_mark.html>`__