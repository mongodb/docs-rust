.. _rust-quick-start-download-and-install:

====================
Download and Install
====================

.. procedure::
   :style: connected

   .. step:: Install Rust and Cargo

      Ensure you have Rust {+min-rust-version+} or later, and Cargo, the
      Rust package manager, installed in your development environment.

      For information about how to install Rust and Cargo, see
      the official Rust guide on `downloading and installing Rust <https://www.rust-lang.org/tools/install>`__.

   .. step:: Create a Project Directory

      In your shell, run the following command to create a 
      directory called ``rust_quickstart`` for this project:

      .. code-block:: bash

         cargo new rust_quickstart
      
      When this command successfully completes, you should have a ``Cargo.toml`` 
      file and a ``src`` directory with a ``main.rs`` file in your
      ``rust_quickstart`` directory.

      Run the following command to navigate into the project 
      directory:

      .. code-block:: bash

         cd rust_quickstart

   .. step:: Install the Rust Driver

      Add the following crates to your project by including them in the
      dependencies list located in your project's ``Cargo.toml`` file:
      
      - ``mongodb``, the {+driver-short+} crate
      - ``serde_json``, a JSON data representation crate
      - ``futures``, an asynchronous runtime crate that provides core abstractions

      .. tip::
   
         The ``mongodb`` crate resolves the ``bson`` crate, which is the primary
         MongoDB data representation crate. You do not need to add the ``bson``
         crate to your dependencies list.

      The driver supports both asynchronous and synchronous runtimes.
      To see example dependency lists for each runtime, select
      from the following :guilabel:`Asynchronous API` and
      :guilabel:`Synchronous API` tabs:

      .. tabs::

         .. tab:: Asynchronous API
            :tabid: asynchronous-api

            .. code-block:: bash

               [dependencies]
               serde_json = "1.0.107"
               futures = "0.3.28"
               tokio = {version = "1.32.0", features = ["full"]}
               
               [dependencies.mongodb]
               version = "{+version+}"
               features = ["tokio-runtime"]
            
            .. tip::

               The ``tokio`` asynchronous runtime is the driver's default runtime crate
               and does not require a feature flag. The preceding code example includes
               the ``"tokio-runtime"`` feature flag to specify the ``tokio`` runtime, but
               this flag is optional.

         .. tab:: Synchronous API
            :tabid: synchronous-api

            .. code-block:: bash
               
               [dependencies]
               serde_json = "1.0.107"

               [dependencies.mongodb]
               version = "{+version+}"
               features = ["tokio-sync"]

.. TODO link to runtimes page. this information will be integrated
.. into that page
..
  If you want to use a different synchronous or asynchronous runtime crate,
  replace the feature flag with your runtime crate's corresponding flag.
  The driver supports the following alternative feature flags, which use the
  `async-std <https://crates.io/crates/async-std>`__ crate runtime:

  - The ``"async-std-runtime"`` feature flag
  - The ``"sync"`` feature flag

  For more information about these feature flags, see the `API documentation
  <{+api+}/#all-feature-flags>`__.

  If you want to use both the asynchronous and synchronous runtimes, specify
  the ``tokio`` runtime dependency and include the ``"tokio-sync"`` flag in
  ``dependencies.mongodb``. The following code shows an example dependencies
  list that supports sync and async code:

  .. code-block:: bash
     
     [dependencies]
     serde_json = "1.0.107"
     futures = "0.3.28"
     tokio = {version = "1.32.0", features = ["full"]}

     [dependencies.mongodb]
     version = "{+version+}"
     features = ["tokio-sync"]

After you complete these steps, you should have Rust and Cargo installed 
and a new Rust project with the necessary driver dependencies.

.. include:: /includes/quick-start/troubleshoot.rst

.. button:: Next: Create a MongoDB Deployment
   :uri: /quick-start/create-a-deployment/
