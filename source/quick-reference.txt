.. _rust-quick-reference:

===============
Quick Reference
===============

On this page, you can see examples that use the {+driver-short+} to
perform several common MongoDB tasks. Each row of the following table
describes the task, shows the driver syntax to execute the task, and
includes links to the related reference and API documentation.

The {+driver-short+} offers an asynchronous runtime for executing async
applications. Additionally, the driver supports a blocking synchronous
runtime. For each MongoDB task listed in the following table, you can see
a corresponding async and sync runtime example.

.. 
    TODO: For more information about runtimes, see <link to the runtime fundamentals guide>

.. list-table::
   :header-rows: 1
   :widths: 25 75

   * - Command
     - Syntax 

   * - | **Find a Document**
       |
       | `API Documentation <https://docs.rs/mongodb/latest/mongodb/struct.Collection.html#method.find_one>`__
       | Usage Example
       | :ref:`Fundamentals Guide <rust-retrieve-guide>`

     - *Async Runtime*

       .. code-block:: rust
          :copyable: true

          let result = collection.find_one(
              doc! { "title": "Peter Pan" },
              None
          ).await?;
    
       *Sync Runtime*
        
       .. code-block:: rust
          :copyable: true

          let result = collection.find_one(
              doc! { "title": "Peter Pan" },
              None
          )?;

   * - | **Find Multiple Documents**
       |
       | `API Documentation <https://docs.rs/mongodb/latest/mongodb/struct.Collection.html#method.find>`__
       | Usage Example
       | :ref:`Fundamentals Guide <rust-retrieve-guide>`

     - *Async Runtime*
    
       .. code-block:: rust
          :copyable: true

          let filter = doc! { "year": 1925 };
          let mut cursor = collection.find(filter, None).await?;
    
       *Sync Runtime*

       .. code-block:: rust
          :copyable: true

          let filter = doc! { "year": 1925 };
          let mut cursor = collection.find(filter, None)?;

   * - | **Insert a Document**
       |
       | `API Documentation <https://docs.rs/mongodb/latest/mongodb/struct.Collection.html#method.insert_one>`__ 
       | Usage Example
       | :ref:`Fundamentals Guide <rust-insert-guide>`

     - *Async Runtime*
     
       .. code-block:: rust
          :copyable: true

          let doc = doc! {
              "title": "Mistress America", "type": "movie"
          };

          let result = collection.insert_one(doc, None).await?;

       *Sync Runtime*

       .. code-block:: rust
          :copyable: true

          let doc = doc! { 
              "title": "Mistress America", "type": "movie" 
          };

          let result = collection.insert_one(doc, None)?;

   * - | **Insert Multiple Documents**
       |
       | `API Documentation <https://docs.rs/mongodb/latest/mongodb/struct.Collection.html#method.insert_many>`__ 
       | Usage Example
       | :ref:`Fundamentals Guide <rust-insert-guide>`

     - *Async Runtime*
 
       .. code-block:: rust
          :copyable: true

          let docs = vec![
              doc! { "title": "Friends With Money", "runtime": 88 },
              doc! { "title": "Please Give", "runtime": 90 },
              doc! { "title": "You Hurt My Feelings", "runtime": 93 },
          ];

          let result = collection.insert_many(docs, None).await?;

       *Sync Runtime*

       .. code-block:: rust
          :copyable: true

          let docs = vec![
              doc! { "title": "Friends With Money", "runtime": 88 },
              doc! { "title": "Please Give", "runtime": 90 },
              doc! { "title": "You Hurt My Feelings", "runtime": 93 },
          ];

          let result = collection.insert_many(docs, None)?;

   * - | **Update a Document**
       |
       | `API Documentation <https://docs.rs/mongodb/latest/mongodb/struct.Collection.html#method.update_one>`__
       | Usage Example
       | :ref:`Fundamentals Guide <rust-change-guide>`

     - *Async Runtime*
      
       .. code-block:: rust
          :copyable: true

          let filter_doc = doc! { "title": "Burn After Reading"};
          let update_doc =
              doc! {
                  "$set": doc!{ "num_mflix_comments": 1 }
          };

          let result = collection.update_one(
                filter_doc, update_doc, None
            ).await?;

       *Sync Runtime*

       .. code-block:: rust
          :copyable: true

          let filter_doc = doc! { "title": "Burn After Reading"};
          let update_doc =
              doc! {
                  "$set": doc!{ "num_mflix_comments": 1 }
          };

          let result = collection.update_one(
                filter_doc, update_doc, None
            )?;

   * - | **Update Multiple Documents**
       |
       | `API Documentation <https://docs.rs/mongodb/latest/mongodb/struct.Collection.html#method.update_many>`__
       | Usage Example
       | :ref:`Fundamentals Guide <rust-change-guide>`

     - *Async Runtime*
      
       .. code-block:: rust
          :copyable: true

          let filter_doc = doc! { "rated": "PASSED"};
          let update_doc =
              doc! {
                  "$set": doc!{ "rated": "Not Rated" }
          };

          let result = collection.update_many(
                filter_doc, update_doc, None
            ).await?;

       *Sync Runtime*

       .. code-block:: rust
          :copyable: true

          let filter_doc = doc! { "rated": "PASSED"};
          let update_doc =
              doc! {
                  "$set": doc!{ "rated": "Not Rated" }
          };

          let result = collection.update_many(
                filter_doc, update_doc, None
            )?;
             
   * - | **Replace a Document**
       |
       | `API Documentation <https://docs.rs/mongodb/latest/mongodb/struct.Collection.html#method.replace_one>`__
       | Usage Example
       | :ref:`Fundamentals Guide <rust-change-guide>`  

     - *Async Runtime*
    
       .. code-block:: rust
          :copyable: true

          let filter = doc! { "title": "è Nous la Libertè" };
          let replace_doc =
              doc! {
              "title": "À nous la liberté",
              "type": "movie",
              "directors": vec! [ "René Clair" ]
          };

          let result = collection.replace_one(
                filter, replace_doc, None
            ).await?;

       *Sync Runtime*

       .. code-block:: rust
          :copyable: true

          let filter = doc! { "title": "è Nous la Libertè" };
          let replace_doc =
              doc! {
              "title": "À nous la liberté",
              "type": "movie",
              "directors": vec! [ "René Clair" ]
          };

          let result = collection.replace_one(
                filter, replace_doc, None
            )?;

   * - | **Delete a Document**
       |
       | `API Documentation <https://docs.rs/mongodb/latest/mongodb/struct.Collection.html#method.delete_one>`__
       | Usage Example
       | :ref:`Fundamentals Guide <rust-delete-guide>`

     - *Async Runtime*
       
       .. code-block:: rust
          :copyable: true

          let filter = doc! { "title": "Search and Destroy" };
          let result = collection.delete_one(filter, None).await?;

       *Sync Runtime*

       .. code-block:: rust
        :copyable: true

        let filter = doc! { "title": "Search and Destroy" };
        let result = collection.delete_one(filter, None)?;
          
   * - | **Delete Multiple Documents**
       |
       | `API Documentation <https://docs.rs/mongodb/latest/mongodb/struct.Collection.html#method.delete_many>`__ 
       | Usage Example
       | :ref:`Fundamentals Guide <rust-delete-guide>`

     - *Async Runtime*
       
       .. code-block:: rust
          :copyable: true
 
          let filter = doc! {
              "year": doc! { "$lt": 1920 } 
          };

          let result = collection.delete_many(filter, None).await?;

       *Sync Runtime*

       .. code-block:: rust
          :copyable: true
 
          let filter = doc! { 
              "year": doc! { "$lt": 1920 } 
          };

          let result = collection.delete_many(filter, None)?;

   * - | **Access Data from a Cursor Iteratively**
       |
       | `API Documentation <https://docs.rs/mongodb/latest/mongodb/struct.Cursor.html>`__ 
       | Usage Example
       | :ref:`Fundamentals Guide <rust-cursor-guide>`

     - *Async Runtime*
      
       .. code-block:: rust
          :copyable: true
            
          let mut cursor = collection.find(
              doc! { "$and": vec!
                  [
                      doc! { "metacritic": doc! { "$gt": 90 } },
                      doc! { "directors": vec! [ "Martin Scorsese" ] }
                  ] },
              None
          ).await?;

          while let Some(result) = cursor.try_next().await? {
              let doc: Document = bson::from_document(result)?;
              println!("{}", serde_json::to_string_pretty(&doc).unwrap());
          };

       *Sync Runtime*

       .. code-block:: rust
          :copyable: true
            
          let mut cursor = collection.find(
              doc! { "$and": vec!
                  [
                      doc! { "metacritic": doc! { "$gt": 90 } },
                      doc! { "directors": vec! [ "Martin Scorsese" ] }
                  ] },
              None
          )?;

          while let Some(result) = cursor.try_next()? {
              let doc: Document = bson::from_document(result)?;
              println!("{}", serde_json::to_string_pretty(&doc).unwrap());
          }

   * - | **Access Data from a Cursor as an Array**
       |
       | `API Documentation <https://docs.rs/futures/latest/futures/stream/trait.TryStreamExt.html#method.try_collect>`__ 
       | Usage Example
       | :ref:`Fundamentals Guide <rust-cursor-guide>`

     - *Async Runtime*
      
       .. code-block:: rust
          :copyable: true
            
          let cursor = collection.find(
                doc! { "title": "Secrets & Lies" }, None
            ).await?;

          let result: Vec<Document> = cursor.try_collect().await?;

       *Sync Runtime*

       .. code-block:: rust
          :copyable: true
            
          let cursor = collection.find(
                doc! { "title": "Secrets & Lies" }, None
            )?;

          let result: Vec<Document> = cursor.try_collect()?;

   * - | **Count Documents**
       |
       | `API Documentation <https://docs.rs/mongodb/latest/mongodb/struct.Collection.html#method.count_documents>`__
       | Usage Example
       | Fundamentals Guide

     - *Async Runtime*
       
       .. code-block:: rust
          :copyable: true
 
          let filter = doc! {
              "languages": vec! [ "Mandarin" ] 
          };

          let result = collection.count_documents(filter, None).await?;

       *Sync Runtime*

       .. code-block:: rust
          :copyable: true
 
          let filter = doc! {
              "languages": vec! [ "Mandarin" ]
          };

          let result = collection.count_documents(filter, None)?;

   * - | **List Distinct Values of a Field**
       |
       | `API Documentation <https://docs.rs/mongodb/latest/mongodb/struct.Collection.html#method.distinct>`__
       | Usage Example
       | Fundamentals Guide

     - *Async Runtime*
       
       .. code-block:: rust
          :copyable: true
 
          let field_name = "title";
          let filter = doc! {
              "directors": vec! [ "Sean Baker" ]
          };

          let mut cursor = collection.distinct(
                field_name, filter, None
            ).await?;

       *Sync Runtime*

       .. code-block:: rust
          :copyable: true
 
          let field_name = "title";
          let filter = doc! {
              "directors": vec! [ "Sean Baker" ]
          };

          let mut cursor = collection.distinct(
                field_name, filter, None
            )?;

   * - | **Limit the Number of Documents Retrieved**
       |
       | `API Documentation <https://docs.rs/mongodb/latest/mongodb/options/struct.FindOptions.html#structfield.limit>`__
       | Usage Example 
       | Fundamentals Guide

     - *Async Runtime*
       
       .. code-block:: rust
          :copyable: true
          
          let opts: FindOptions = FindOptions::builder()
              .limit(5)
              .build();

          let filter = doc! { "awards.wins": 25};
          let mut cursor = collection.find(filter, opts).await?;

       *Sync Runtime*

       .. code-block:: rust
          :copyable: true
          
          let opts: FindOptions = FindOptions::builder()
              .limit(5)
              .build();

          let filter = doc! { "awards.wins": 25};
          let mut cursor = collection.find(filter, opts)?;

   * - | **Skip Retrieved Documents**
       |
       | `API Documentation <https://docs.rs/mongodb/latest/mongodb/options/struct.FindOptions.html#structfield.skip>`__
       | Usage Example
       | Fundamentals Guide

     - *Async Runtime*
      
       .. code-block:: rust
          :copyable: true
          
          let opts: FindOptions = FindOptions::builder()
              .skip(1)
              .build();

          let filter = doc! { "runtime": 100 };
          let mut cursor = collection.find(filter, opts).await?;

       *Sync Runtime*

       .. code-block:: rust
          :copyable: true
          
          let opts: FindOptions = FindOptions::builder()
              .skip(1)
              .build();

          let filter = doc! { "runtime": 100 };
          let mut cursor = collection.find(filter, opts)?;

   * - | **Sort the Documents When Retrieving Them**
       |
       | `API Documentation <https://docs.rs/mongodb/latest/mongodb/options/struct.FindOptions.html#structfield.sort>`__
       | Usage Example
       | Fundamentals Guide

     - *Async Runtime*
      
       .. code-block:: rust
          :copyable: true
          
          let opts: FindOptions = FindOptions::builder()
              .sort(doc! { "imdb.rating": 1 })
              .build();

          let filter = doc! {
              "directors": vec! [ "Nicole Holofcener" ]
          };

          let mut cursor = collection.find(filter, opts).await?;

       *Sync Runtime*

       .. code-block:: rust
          :copyable: true
          
          let opts: FindOptions = FindOptions::builder()
              .sort(doc! { "imdb.rating": 1 })
              .build();

          let filter = doc! {
              "directors": vec! [ "Nicole Holofcener" ]
          };
          
          let mut cursor = collection.find(filter, opts)?;

   * - | **Project Document Fields When Retrieving Them**
       |
       | `API Documentation <https://docs.rs/mongodb/latest/mongodb/options/struct.FindOptions.html#structfield.projection>`__
       | Usage Example
       | Fundamentals Guide

     - *Async Runtime*
      
       .. code-block:: rust
          :copyable: true
          
          let opts: FindOptions = FindOptions::builder()
              .projection(doc! { "title": 1, "metacritic": 1, "_id": 0 })
              .build();

          let filter = doc! { "year": 2015 };
          let mut cursor = collection.find(filter, opts).await?;

       *Sync Runtime*

       .. code-block:: rust
          :copyable: true
          
          let opts: FindOptions = FindOptions::builder()
              .projection(doc! { "title": 1, "metacritic": 1, "_id": 0 })
              .build();

          let filter = doc! { "year": 2015 };
          let mut cursor = collection.find(filter, opts)?;

   * - | **Create an Index**
       |
       | `API Documentation <https://docs.rs/mongodb/latest/mongodb/struct.Collection.html#method.create_index>`__
       | Usage Example
       | Fundamentals Guide

     - *Async Runtime*
      
       .. code-block:: rust
          :copyable: true

          let index: IndexModel = IndexModel::builder()
              .keys(doc! { "title": 1 })
              .build();

          let result = collection.create_index(index, None).await?;

       *Sync Runtime*

       .. code-block:: rust
          :copyable: true

          let index: IndexModel = IndexModel::builder()
              .keys(doc! { "title": 1 })
              .build();

          let result = collection.create_index(index, None)?;
